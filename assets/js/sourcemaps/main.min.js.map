{"version":3,"sources":["data.js","helpers.js","model.js","router.js","view.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","pages","data","helpers","getPageTitle","document","getElementById","getContentContainer","model","init","setLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","parse","getItem","getPosts","getPost","i","length","getPages","getPage","deleteLocalStorage","removeItem","router","loadContent","listenForChanges","getSlug","window","location","hash","substring","addEventListener","view","clearContent","loadBlogPosts","loadPost","createPostMarkup","post","articleEl","createElement","titleEl","titleAnchor","titleContent","createTextNode","postContent","appendChild","href","createMenu","listItemEl","pageAnchor","pageAnchorContent","postsMarkup","createDocumentFragment","contentContainer","innerHTML","vanillaPress"],"mappings":"AAAA,YAOA,IAAAA,SACAC,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,cACAC,KAAA,QACAC,MAAA,eACAC,QAAA,0FAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,sBACAC,KAAA,QACAC,MAAA,uBACAC,QAAA,iDAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,WACAC,KAAA,QACAC,MAAA,gBACAC,QAAA,mEAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,YACAC,KAAA,QACAC,MAAA,aACAC,QAAA,+HAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,qBACAC,KAAA,QACAC,MAAA,qBACAC,QAAA,0CAQAC,QACAP,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,QAAA,iDAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,QACAC,KAAA,OACAC,MAAA,QACAC,QAAA,uBAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,QAAA,0BAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,UACAC,KAAA,OACAC,MAAA,UACAC,QAAA,yCAQAE,MACAT,MAAAA,MACAQ,MAAAA,OCxFAE,UAQAA,SAAAC,aAAA,WACA,MAAAC,UAAAC,eAAA,cASAH,QAAAI,oBAAA,WACA,MAAAF,UAAAC,eAAA,eCnBA,IAAAE,SAOAA,OAAAC,KAAA,WACAD,MAAAE,gBAAAR,OASAM,MAAAE,gBAAA,SAAAR,GACAS,aAAAC,QAAA,eAAAC,KAAAC,UAAAZ,KASAM,MAAAO,gBAAA,WACA,MAAAF,MAAAG,MAAAL,aAAAM,QAAA,kBASAT,MAAAU,SAAA,WACA,GAAAzB,GAAAe,MAAAO,kBAAAtB,KAEA,OAAAA,IAUAe,MAAAW,QAAA,SAAAtB,GAGA,IAAA,GAFAJ,GAAAe,MAAAO,kBAAAtB,MAEA2B,EAAA,EAAAA,EAAA3B,EAAA4B,OAAAD,IACA,GAAAvB,IAAAJ,EAAA2B,GAAAvB,KACA,MAAAJ,GAAA2B,EAIA,OAAA,OASAZ,MAAAc,SAAA,WACA,GAAArB,GAAAO,MAAAO,kBAAAd,KAEA,OAAAA,IAUAO,MAAAe,QAAA,SAAA1B,GAGA,IAAA,GAFAI,GAAAO,MAAAO,kBAAAd,MAEAmB,EAAA,EAAAA,EAAAnB,EAAAoB,OAAAD,IACA,GAAAvB,IAAAI,EAAAmB,GAAAvB,KACA,MAAAI,GAAAmB,EAIA,OAAA,OAQAZ,MAAAgB,mBAAA,WACAb,aAAAc,WAAA,gBCnGA,IAAAC,UAQAA,QAAAjB,KAAA,WACAiB,OAAAC,cACAD,OAAAE,oBASAF,OAAAG,QAAA,WACA,GAAAhC,GAAAiC,OAAAC,SAAAC,IAEA,OAAA,KAAAnC,EACA,KAEAA,EAAAoC,UAAA,IASAP,OAAAE,iBAAA,WACAE,OAAAI,iBAAA,aAAAR,OAAAC,aAAA,IASAD,OAAAC,YAAA,WACA,GAAA9B,GAAA6B,OAAAG,SAEAM,MAAAC,eAEA,OAAAvC,EACAsC,KAAAE,gBAEAF,KAAAG,SAAAzC,GCpDA,IAAAsC,QAOAA,MAAA1B,KAAA,aASA0B,KAAAI,iBAAA,SAAAC,GACA,GAAAC,GAAApC,SAAAqC,cAAA,WACAC,EAAAtC,SAAAqC,cAAA,MACAE,EAAAvC,SAAAqC,cAAA,KACAG,EAAAxC,SAAAyC,eAAAN,EAAAzC,OACAgD,EAAA1C,SAAAqC,cAAA,MAWA,OATAE,GAAAI,YAAAH,GACAD,EAAAK,KAAA,IAAAT,EAAA3C,KACA8C,EAAAK,YAAAJ,GAEAG,EAAAC,YAAA3C,SAAAyC,eAAAN,EAAAxC,UAEAyC,EAAAO,YAAAL,GACAF,EAAAO,YAAAD,GAEAN,GAIAN,KAAAe,WAAA,WACA,GAAAC,GAAA9C,SAAAqC,cAAA,MACAU,EAAA/C,SAAAqC,cAAA,KACAW,EAAAhD,SAAAyC,eAAA7C,MAAAF,MAMA,OAJAqD,GAAAJ,YAAAK,GACAD,EAAAH,KAAA,IAAAhD,MAAAJ,KACAsD,EAAAH,YAAAI,GAEAD,GAQAhB,KAAAE,cAAA,WAKA,IAAA,GAJA5C,GAAAe,MAAAU,WACAoC,EAAAjD,SAAAkD,yBACAC,EAAArD,QAAAI,sBAEAa,EAAA,EAAAA,EAAA3B,EAAA4B,OAAAD,IACAkC,EAAAN,YAAAb,KAAAI,iBAAA9C,EAAA2B,IAGAoC,GAAAR,YAAAM,IASAnB,KAAAG,SAAA,SAAAzC,GACA,GAAA2C,GAAAhC,MAAAW,QAAAtB,GACA8C,EAAAxC,QAAAC,eACA2C,EAAA5C,QAAAI,qBAEAoC,GAAAc,UAAAjB,EAAAzC,MACAgD,EAAAU,UAAAjB,EAAAxC,SAQAmC,KAAAC,aAAA,WACA,GAAAO,GAAAxC,QAAAC,eACA2C,EAAA5C,QAAAI,qBAEAoC,GAAAc,UAAA,GACAV,EAAAU,UAAA,GC1FA,IAAAC,eACAjD,KAAA,WACAD,MAAAC,OACAiB,OAAAjB,QAIAiD,cAAAjD","file":"../main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Arry of post objects for use\n *\n * @type {Array}\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"I'm learning JavaScript and super excited!!!\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"Some more sample content to work with\"\n}];\n\n/**\n * Array of page objects for use\n *\n * @type {Array}\n */\nvar pages = [{\n  \"id\": 6,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"home\",\n  \"type\": \"page\",\n  \"title\": \"Home\",\n  \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n}, {\n  \"id\": 7,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"about\",\n  \"type\": \"page\",\n  \"title\": \"About\",\n  \"content\": \"A little about me!\"\n}, {\n  \"id\": 8,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"blog\",\n  \"type\": \"page\",\n  \"title\": \"Blog\",\n  \"content\": \"Please enjoy my posts\"\n}, {\n  \"id\": 9,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"contact\",\n  \"type\": \"page\",\n  \"title\": \"Contact\",\n  \"content\": \"Drop me a line with any questions :)\"\n}];\n\n/**\n * Turn the posts/pages array into a usable JSON format\n *\n * @type {string}\n */\nvar data = {\n  'posts': posts,\n  'pages': pages\n};","'use strict';\n\n/**\n * Helpers object\n *\n * @type {Object}\n */\nvar helpers = {};\n\n/**\n * Get the title of the current page\n *\n * @method getPageTitle\n * @return {node} The title of the current page\n */\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\n/**\n * Get the content container of the current page\n *\n * @method getContentContainer\n * @return {node} The content container for the current page\n */\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};","'use strict';\n\n/**\n * Model object\n *\n * @type {Object}\n */\nvar model = {};\n\n/**\n * Initialize the Model\n *\n * @method init\n */\nmodel.init = function () {\n  model.setLocalStorage(data);\n};\n\n/**\n * Save the temporary data to the browsers local storage\n *\n * @method setLocalStorage\n * @param  {sting} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Get content from the browsers local storage\n *\n * @method getLocalStorage\n * @return {object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n *\n * @method getPosts\n * @return {array} An array of post objects\n */\nmodel.getPosts = function () {\n  var posts = model.getLocalStorage().posts;\n\n  return posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n *\n * @method getPost\n * @param  {string} slug The current URL slug\n * @return {object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = function (slug) {\n  var posts = model.getLocalStorage().posts;\n\n  for (var i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n *\n * @method getPages\n * @return {array} An array of page objects\n */\nmodel.getPages = function () {\n  var pages = model.getLocalStorage().pages;\n\n  return pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n *\n * @method getPage\n * @param  {string} slug The current URL slug\n * @return {object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = function (slug) {\n  var pages = model.getLocalStorage().pages;\n\n  for (var i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Deletes data from the browsers local storage\n *\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};","'use strict';\n\n/**\n * Router object\n *\n * @type {Object}\n */\nvar router = {};\n\n/**\n * Initialize the Router\n *\n * @method init\n * @return {method} The functions to call when the Router loads\n */\nrouter.init = function () {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n *\n * @method getSlug\n * @return {string} The slug for the current post or page\n */\nrouter.getSlug = function () {\n  var slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n};\n\n/**\n * Listen for changes to the URL hash\n *\n * @method listenForChanges\n */\nrouter.listenForChanges = function () {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n/**\n * Load content based upon the current slug\n *\n * @method loadContent\n * @return {method} The method to run based upon the URL hash\n */\nrouter.loadContent = function () {\n  var slug = router.getSlug();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadBlogPosts();\n  } else {\n    view.loadPost(slug);\n  }\n};","'use strict';\n\n/**\n * View object\n *\n * @type {Object}\n */\nvar view = {};\n\n/**\n * Initialize the View\n *\n * @method init\n */\nview.init = function () {};\n\n/**\n * Create the markup for the posts\n *\n * @method createPostMarkup\n * @param  {object} post Post to create markup for\n * @return {node} Final post markup\n */\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n\n// Display the menu of pages\nview.createMenu = function () {\n  var listItemEl = document.createElement('li'),\n      pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(pages.title);\n\n  pageAnchor.appendChild(pageAnchorContent);\n  pageAnchor.href = '#' + pages.slug;\n  listItemEl.appendChild(pageAnchor);\n\n  return listItemEl;\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n *\n * @method loadBlogPosts\n */\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n/**\n * Load a single blog post\n *\n * @method loadPost\n * @param  {string} slug The current URL slug\n */\nview.loadPost = function (slug) {\n  var post = model.getPost(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = post.title;\n  postContent.innerHTML = post.content;\n};\n\n/**\n * Clear the content from the page\n *\n * @method clearContent\n */\nview.clearContent = function () {\n  var titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};","\"use strict\";\n\n/**\n * The application object\n *\n * @type {Object}\n */\nvar vanillaPress = {\n  init: function init() {\n    model.init();\n    router.init();\n  }\n};\n\nvanillaPress.init();"]}