{"version":3,"sources":["data.js","helpers.js","model.js","router.js","view.js","editor.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","pages","data","helpers","getPageTitle","document","getElementById","getContentContainer","getMenu","querySelector","createMenuItem","listItemEl","createElement","appendChild","createLink","pageAnchor","pageAnchorContent","createTextNode","href","getEditorEl","getEditorToggle","getEditorToggleLink","getEditorTitleEl","getEditorContentEl","model","init","setLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","parse","getItem","getPosts","getPost","i","length","getPages","getPage","deleteLocalStorage","removeItem","getContent","getCurrentContent","router","getSlug","loadContent","listenForChanges","window","location","hash","substring","addEventListener","view","clearContent","loadSingle","loadBlogPosts","createMenu","menuMarkup","createDocumentFragment","menuEl","createPostMarkup","post","articleEl","titleEl","titleAnchor","titleContent","postContent","postsMarkup","contentContainer","innerHTML","editor","listener","toggle","editorEl","editorToggle","classList","event","preventDefault","contains","loadEditorForm","formTitle","formContent","value","vanillaPress"],"mappings":"AAAA,YAOA,IAAAA,SACAC,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,cACAC,KAAA,QACAC,MAAA,eACAC,QAAA,0FAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,sBACAC,KAAA,QACAC,MAAA,uBACAC,QAAA,iDAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,WACAC,KAAA,QACAC,MAAA,gBACAC,QAAA,mEAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,YACAC,KAAA,QACAC,MAAA,aACAC,QAAA,+HAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,qBACAC,KAAA,QACAC,MAAA,qBACAC,QAAA,0CAQAC,QACAP,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,QAAA,iDAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,QACAC,KAAA,OACAC,MAAA,QACAC,QAAA,uBAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,OACAC,KAAA,OACAC,MAAA,OACAC,QAAA,0BAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,UACAC,KAAA,OACAC,MAAA,UACAC,QAAA,yCAQAE,MACAT,MAAAA,MACAQ,MAAAA,OCxFAE,UAQAA,SAAAC,aAAA,WACA,MAAAC,UAAAC,eAAA,cASAH,QAAAI,oBAAA,WACA,MAAAF,UAAAC,eAAA,gBASAH,QAAAK,QAAA,WACA,MAAAH,UAAAI,cAAA,gBAUAN,QAAAO,eAAA,SAAAR,GACA,GAAAS,GAAAN,SAAAO,cAAA,KAIA,OAFAD,GAAAE,YAAAV,QAAAW,WAAAZ,IAEAS,GAUAR,QAAAW,WAAA,SAAAZ,GACA,GAAAa,GAAAV,SAAAO,cAAA,KACAI,EAAAX,SAAAY,eAAAf,EAAAH,MAUA,OARAgB,GAAAF,YAAAG,GAEA,SAAAd,EAAAL,KACAkB,EAAAG,KAAA,IAEAH,EAAAG,KAAA,IAAAhB,EAAAL,KAGAkB,GAQAZ,QAAAgB,YAAA,WACA,MAAAd,UAAAC,eAAA,WAQAH,QAAAiB,gBAAA,WACA,MAAAf,UAAAC,eAAA,iBAOAH,QAAAkB,oBAAA,WACA,MAAAhB,UAAAI,cAAA,oBAGAN,QAAAmB,iBAAA,WACA,MAAAjB,UAAAC,eAAA,cAGAH,QAAAoB,mBAAA,WACA,MAAAlB,UAAAC,eAAA,eCpGA,IAAAkB,SAOAA,OAAAC,KAAA,WACAD,MAAAE,gBAAAxB,OASAsB,MAAAE,gBAAA,SAAAxB,GACAyB,aAAAC,QAAA,eAAAC,KAAAC,UAAA5B,KASAsB,MAAAO,gBAAA,WACA,MAAAF,MAAAG,MAAAL,aAAAM,QAAA,kBASAT,MAAAU,SAAA,WACA,GAAAzC,GAAA+B,MAAAO,kBAAAtC,KAEA,OAAAA,IAUA+B,MAAAW,QAAA,SAAAtC,GAGA,IAAA,GAFAJ,GAAA+B,MAAAO,kBAAAtC,MAEA2C,EAAA,EAAAA,EAAA3C,EAAA4C,OAAAD,IACA,GAAAvC,IAAAJ,EAAA2C,GAAAvC,KACA,MAAAJ,GAAA2C,EAIA,OAAA,OASAZ,MAAAc,SAAA,WACA,GAAArC,GAAAuB,MAAAO,kBAAA9B,KAEA,OAAAA,IAUAuB,MAAAe,QAAA,SAAA1C,GAGA,IAAA,GAFAI,GAAAuB,MAAAO,kBAAA9B,MAEAmC,EAAA,EAAAA,EAAAnC,EAAAoC,OAAAD,IACA,GAAAvC,IAAAI,EAAAmC,GAAAvC,KACA,MAAAI,GAAAmC,EAIA,OAAA,OAQAZ,MAAAgB,mBAAA,WACAb,aAAAc,WAAA,iBASAjB,MAAAkB,WAAA,SAAA7C,GACA,GAAAG,GAAAwB,MAAAW,QAAAtC,EAaA,OAXA,QAAAG,IACAA,EAAAwB,MAAAe,QAAA1C,IAGA,OAAAG,IACAA,GACAD,MAAA,YACAC,QAAA,sBAIAA,GASAwB,MAAAmB,kBAAA,WACA,GAAA9C,GAAA+C,OAAAC,UACA7C,EAAA,MAQA,OANA,QAAAH,IACAA,EAAA,QAGAG,EAAAwB,MAAAkB,WAAA7C,GC3IA,IAAA+C,UAQAA,QAAAnB,KAAA,WACAmB,OAAAE,cACAF,OAAAG,oBASAH,OAAAC,QAAA,WACA,GAAAhD,GAAAmD,OAAAC,SAAAC,IAEA,OAAA,KAAArD,EACA,KAEAA,EAAAsD,UAAA,IASAP,OAAAG,iBAAA,WACAC,OAAAI,iBAAA,aAAAR,OAAAE,aAAA,IASAF,OAAAE,YAAA,WACA,GAAAjD,GAAA+C,OAAAC,SAEAQ,MAAAC,eAEA,OAAAzD,EACAwD,KAAAE,WAAA,QACA,SAAA1D,EACAwD,KAAAG,gBAEAH,KAAAE,WAAA1D,GCtDA,IAAAwD,QAOAA,MAAA5B,KAAA,WACA4B,KAAAI,cAQAJ,KAAAI,WAAA,WAKA,IAAA,GAJAxD,GAAAuB,MAAAc,WACAoB,EAAArD,SAAAsD,yBACAC,EAAAzD,QAAAK,UAEA4B,EAAA,EAAAA,EAAAnC,EAAAoC,OAAAD,IACAsB,EAAA7C,YAAAV,QAAAO,eAAAT,EAAAmC,IAGAwB,GAAA/C,YAAA6C,IAUAL,KAAAQ,iBAAA,SAAAC,GACA,GAAAC,GAAA1D,SAAAO,cAAA,WACAoD,EAAA3D,SAAAO,cAAA,MACAqD,EAAA5D,SAAAO,cAAA,KACAsD,EAAA7D,SAAAY,eAAA6C,EAAA/D,OACAoE,EAAA9D,SAAAO,cAAA,MAWA,OATAqD,GAAApD,YAAAqD,GACAD,EAAA/C,KAAA,IAAA4C,EAAAjE,KACAmE,EAAAnD,YAAAoD,GAEAE,EAAAtD,YAAAR,SAAAY,eAAA6C,EAAA9D,UAEA+D,EAAAlD,YAAAmD,GACAD,EAAAlD,YAAAsD,GAEAJ,GAQAV,KAAAG,cAAA,WAKA,IAAA,GAJA/D,GAAA+B,MAAAU,WACAkC,EAAA/D,SAAAsD,yBACAU,EAAAlE,QAAAI,sBAEA6B,EAAA,EAAAA,EAAA3C,EAAA4C,OAAAD,IACAgC,EAAAvD,YAAAwC,KAAAQ,iBAAApE,EAAA2C,IAGAiC,GAAAxD,YAAAuD,IASAf,KAAAE,WAAA,SAAA1D,GACA,GAAAG,GAAAwB,MAAAkB,WAAA7C,GACAmE,EAAA7D,QAAAC,eACA+D,EAAAhE,QAAAI,qBAEAyD,GAAAM,UAAAtE,EAAAD,MACAoE,EAAAG,UAAAtE,EAAAA,SAQAqD,KAAAC,aAAA,WACA,GAAAU,GAAA7D,QAAAC,eACA+D,EAAAhE,QAAAI,qBAEAyD,GAAAM,UAAA,GACAH,EAAAG,UAAA,GChGA,IAAAC,UAOAA,QAAA9C,KAAA,WACA8C,OAAAC,YAQAD,OAAAC,SAAA,WACA,GAAAC,GAAAtE,QAAAiB,iBAEAqD,GAAArB,iBAAA,QAAAmB,OAAAE,QAAA,IAQAF,OAAAE,OAAA,WACA,GAAAC,GAAAvE,QAAAgB,cACAwD,EAAAxE,QAAAiB,iBAEAsD,GAAAE,UAAAH,OAAA,UACAE,EAAAC,UAAAH,OAAA,UAEAI,MAAAC,kBAEA,IAAAH,EAAAC,UAAAG,SAAA,WACAR,OAAAS,eAAAxD,MAAAmB,sBAWA4B,OAAAS,eAAA,SAAAhF,GACA,GAAAiF,GAAA9E,QAAAmB,mBACA4D,EAAA/E,QAAAoB,oBAEA0D,GAAAE,MAAAnF,EAAAD,MACAmF,EAAAC,MAAAnF,EAAAA,QCrDA,IAAAoF,eACA3D,KAAA,WACAD,MAAAC,OACAmB,OAAAnB,OACA4B,KAAA5B,OACA8C,OAAA9C,QAIA2D,cAAA3D","file":"../main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Arry of post objects for use\n *\n * @type {Array}\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"I'm learning JavaScript and super excited!!!\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"Some more sample content to work with\"\n}];\n\n/**\n * Array of page objects for use\n *\n * @type {Array}\n */\nvar pages = [{\n  \"id\": 6,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"home\",\n  \"type\": \"page\",\n  \"title\": \"Home\",\n  \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n}, {\n  \"id\": 7,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"about\",\n  \"type\": \"page\",\n  \"title\": \"About\",\n  \"content\": \"A little about me!\"\n}, {\n  \"id\": 8,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"blog\",\n  \"type\": \"page\",\n  \"title\": \"Blog\",\n  \"content\": \"Please enjoy my posts\"\n}, {\n  \"id\": 9,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"contact\",\n  \"type\": \"page\",\n  \"title\": \"Contact\",\n  \"content\": \"Drop me a line with any questions :)\"\n}];\n\n/**\n * Turn the posts/pages array into a usable JSON format\n *\n * @type {String}\n */\nvar data = {\n  posts: posts,\n  pages: pages\n};","'use strict';\n\n/**\n * Helpers object\n *\n * @type {Object}\n */\nvar helpers = {};\n\n/**\n * Get the title of the current page\n *\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\n/**\n * Get the content container of the current page\n *\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};\n\n/**\n * Get the main menu element\n *\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = function () {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Create a new list item for the main menu\n *\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = function (data) {\n  var listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n *\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = function (data) {\n  var pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(data.title);\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  return pageAnchor;\n};\n\n/**\n * Gets the Editor element in the DOM\n *\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = function () {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n *\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = function () {\n  return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = function () {\n  return document.querySelector('#editorToggle a');\n};\n\nhelpers.getEditorTitleEl = function () {\n  return document.getElementById('editTitle');\n};\n\nhelpers.getEditorContentEl = function () {\n  return document.getElementById('editContent');\n};","'use strict';\n\n/**\n * Model object\n *\n * @type {Object}\n */\nvar model = {};\n\n/**\n * Initialize the Model\n *\n * @method init\n */\nmodel.init = function () {\n  model.setLocalStorage(data);\n};\n\n/**\n * Save the temporary data to the browsers local storage\n *\n * @method setLocalStorage\n * @param  {sting} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Get content from the browsers local storage\n *\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n *\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = function () {\n  var posts = model.getLocalStorage().posts;\n\n  return posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n *\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = function (slug) {\n  var posts = model.getLocalStorage().posts;\n\n  for (var i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n *\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = function () {\n  var pages = model.getLocalStorage().pages;\n\n  return pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n *\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = function (slug) {\n  var pages = model.getLocalStorage().pages;\n\n  for (var i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Deletes data from the browsers local storage\n *\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};\n\n/**\n * Get the content that is currently on the page\n *\n * @method getContent\n * @return {[type]} [description]\n */\nmodel.getContent = function (slug) {\n  var content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if (null === content) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    };\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n *\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = function () {\n  var slug = router.getSlug(),\n      content = void 0;\n\n  if (null === slug) {\n    slug = 'home';\n  }\n\n  content = model.getContent(slug);\n\n  return content;\n};","'use strict';\n\n/**\n * Router object\n *\n * @type {Object}\n */\nvar router = {};\n\n/**\n * Initialize the Router\n *\n * @method init\n * @return {method} The functions to call when the Router loads\n */\nrouter.init = function () {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n *\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = function () {\n  var slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n};\n\n/**\n * Listen for changes to the URL hash\n *\n * @method listenForChanges\n */\nrouter.listenForChanges = function () {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n/**\n * Load content based upon the current slug\n *\n * @method loadContent\n * @return {method} The method to run based upon the URL hash\n */\nrouter.loadContent = function () {\n  var slug = router.getSlug();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug) {\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n};","'use strict';\n\n/**\n * View object\n *\n * @type {Object}\n */\nvar view = {};\n\n/**\n * Initialize the View\n *\n * @method init\n */\nview.init = function () {\n  view.createMenu();\n};\n\n/**\n * Display the menu of pages\n *\n * @method createMenu\n */\nview.createMenu = function () {\n  var pages = model.getPages(),\n      menuMarkup = document.createDocumentFragment(),\n      menuEl = helpers.getMenu();\n\n  for (var i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n *\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n *\n * @method loadBlogPosts\n */\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n/**\n * Load a single blog post\n *\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = function (slug) {\n  var content = model.getContent(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n/**\n * Clear the content from the page\n *\n * @method clearContent\n */\nview.clearContent = function () {\n  var titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};","'use strict';\n\n/**\n * Editor object\n *\n * @type {Object}\n */\nvar editor = {};\n\n/**\n * Initialize the editor\n *\n * @method init\n */\neditor.init = function () {\n  editor.listener();\n};\n\n/**\n * Listens for the editor toggle button\n *\n * @return {Object} Main editor DOM object\n */\neditor.listener = function () {\n  var toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', editor.toggle, false);\n};\n\n/**\n * Controls the toggle for the editor\n *\n * @return {Object} Main toggle element\n */\neditor.toggle = function () {\n  var editorEl = helpers.getEditorEl(),\n      editorToggle = helpers.getEditorToggle();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  event.preventDefault();\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(model.getCurrentContent());\n  }\n};\n\n/**\n * Fill the editor form with the content of the current post or page\n *\n * @method fillEditorForm\n * @param  {[type]} content [description]\n * @return {[type]} [description]\n */\neditor.loadEditorForm = function (content) {\n  var formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content;\n};","\"use strict\";\n\n/**\n * The primary VanillaPress application object\n *\n * @type {Object}\n */\nvar vanillaPress = {\n  init: function init() {\n    model.init();\n    router.init();\n    view.init();\n    editor.init();\n  }\n};\n\nvanillaPress.init();"]}