{"version":3,"sources":["data.js","helpers.js","model.js","router.js","view.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","jsonData","JSON","stringify","helpers","getPageTitle","document","getElementById","getContentContainer","model","init","setLocalStorage","data","localStorage","setItem","getLocalStorage","parse","getItem","getPosts","deleteLocalStorage","removeItem","router","loadContent","listenForChanges","getSlug","window","location","hash","substring","addEventListener","view","clearContent","loadBlogPosts","console","log","createPostMarkup","post","articleEl","createElement","titleEl","titleAnchor","titleContent","createTextNode","postContent","appendChild","href","postsMarkup","createDocumentFragment","contentContainer","i","length","innerHTML","vanillaPress"],"mappings":"AAAA,YAKA,IAAAA,SACAC,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,cACAC,KAAA,QACAC,MAAA,eACAC,QAAA,iGAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,sBACAC,KAAA,QACAC,MAAA,uBACAC,QAAA,wDAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,WACAC,KAAA,QACAC,MAAA,gBACAC,QAAA,0EAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,YACAC,KAAA,QACAC,MAAA,aACAC,QAAA,sIAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,qBACAC,KAAA,QACAC,MAAA,qBACAC,QAAA,iDAGAC,SAAAC,KAAAC,UAAAV,OC3CAW,UAEAA,SAAAC,aAAA,WACA,MAAAC,UAAAC,eAAA,cAGAH,QAAAI,oBAAA,WACA,MAAAF,UAAAC,eAAA,eCJA,IAAAE,SAKAA,OAAAC,KAAA,WACAD,MAAAE,gBAAAV,WAQAQ,MAAAE,gBAAA,SAAAC,GACAC,aAAAC,QAAA,eAAAF,IAQAH,MAAAM,gBAAA,WACA,MAAAb,MAAAc,MAAAH,aAAAI,QAAA,kBAQAR,MAAAS,SAAA,WACA,GAAAzB,GAAAgB,MAAAM,iBAEA,OAAAtB,IAMAgB,MAAAU,mBAAA,WACAN,aAAAO,WAAA,gBC5CA,IAAAC,UAQAA,QAAAX,KAAA,WACAW,OAAAC,cACAD,OAAAE,oBASAF,OAAAG,QAAA,WACA,GAAA3B,GAAA4B,OAAAC,SAAAC,IAEA,OAAA,KAAA9B,EACA,KAEAA,EAAA+B,UAAA,IAKAP,OAAAE,iBAAA,WACAE,OAAAI,iBAAA,aAAAR,OAAAC,aAAA,IAIAD,OAAAC,YAAA,WACA,GAAAzB,GAAAwB,OAAAG,SAEAM,MAAAC,eAEA,OAAAlC,EACAiC,KAAAE,gBAEAC,QAAAC,IAAA,iBAAArC,GCzCA,IAAAiC,QAKAA,MAAApB,KAAA,aAQAoB,KAAAK,iBAAA,SAAAC,GACA,GAAAC,GAAA/B,SAAAgC,cAAA,WACAC,EAAAjC,SAAAgC,cAAA,MACAE,EAAAlC,SAAAgC,cAAA,KACAG,EAAAnC,SAAAoC,eAAAN,EAAArC,OACA4C,EAAArC,SAAAgC,cAAA,MAWA,OATAE,GAAAI,YAAAH,GACAD,EAAAK,KAAA,IAAAT,EAAAvC,KACA0C,EAAAK,YAAAJ,GAEAG,EAAAC,YAAAtC,SAAAoC,eAAAN,EAAApC,UAEAqC,EAAAO,YAAAL,GACAF,EAAAO,YAAAD,GAEAN,GAMAP,KAAAE,cAAA,WAKA,IAAA,GAJAvC,GAAAgB,MAAAS,WACA4B,EAAAxC,SAAAyC,yBACAC,EAAA5C,QAAAI,sBAEAyC,EAAA,EAAAA,EAAAxD,EAAAyD,OAAAD,IACAH,EAAAF,YAAAd,KAAAK,iBAAA1C,EAAAwD,IAGAD,GAAAJ,YAAAE,IAIAhB,KAAAC,aAAA,WACA,GAAAQ,GAAAnC,QAAAC,eACAsC,EAAAvC,QAAAI,qBAEA+B,GAAAY,UAAA,GACAR,EAAAQ,UAAA,GCvDA,IAAAC,eACA1C,KAAA,WACAD,MAAAC,OACAW,OAAAX,OACAoB,KAAApB,QAIA0C,cAAA1C","file":"../main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Main JSON object of posts, pages and settings\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"<p>I'm learning JavaScript and super excited!!!</p>\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"<p>I've started working with the REST API in WordPress, what fun!</p>\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"<p>So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data</p>\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"<p>Some more sample content to work with</p>\"\n}];\n\nvar jsonData = JSON.stringify(posts);","'use strict';\n\n// Helper functions\n// -----------------------------------------------------------------------------\nvar helpers = {};\n\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};","'use strict';\n\n// Set up the Model to work with the data\n// -----------------------------------------------------------------------------\n/**\n* Model object\n*/\nvar model = {};\n\n/**\n* Initialize the Model\n*/\nmodel.init = function () {\n  model.setLocalStorage(jsonData);\n};\n\n/**\n* Save the temporary data to the browsers local storage\n*\n* @param data {string} JSON string of the data to be stored\n*/\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', data);\n};\n\n/**\n* Get content from the browsers local storage\n*\n* @return store {object} JavaScript object or array containing the stored site data\n*/\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n* Gets data from the browsers local storage, and sets to a variable for use\n*\n* @return posts {array} An array of post objects\n*/\nmodel.getPosts = function () {\n  var posts = model.getLocalStorage();\n\n  return posts;\n};\n\n/**\n* Deletes data from the browsers local storage\n*/\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};","'use strict';\n\n/**\n * Router obeject\n */\nvar router = {};\n\n/**\n * Initialize the Router\n *\n * @method init\n * @return {[type]} [description]\n */\nrouter.init = function () {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n *\n * @method getSlug\n * @return {string} The slug for the current post or page\n */\nrouter.getSlug = function () {\n  var slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n};\n\n// Listen for URL changes\nrouter.listenForChanges = function () {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n// Load content\nrouter.loadContent = function () {\n  var slug = router.getSlug();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadBlogPosts();\n  } else {\n    console.log('Load the post ' + slug);\n  }\n};","'use strict';\n\n// View file for displaying content\n// -----------------------------------------------------------------------------\n/**\n* View object\n*/\nvar view = {};\n\n/**\n* Initialize the View\n*/\nview.init = function () {};\n\n/**\n* Create the markup for the posts\n*\n* @param object {post} Post to create markup for\n* @return object {articleEl} Final post markup\n*/\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n\n/**\n* Get the post data from local storage, create markup for each one, and append them to the page\n*/\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n// Clear the content from the page\nview.clearContent = function () {\n  var titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};","\"use strict\";\n\n/**\n * The main app object.\n */\nvar vanillaPress = {\n  init: function init() {\n    model.init();\n    router.init();\n    view.init();\n  }\n};\n\nvanillaPress.init();"]}