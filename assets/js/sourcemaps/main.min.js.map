{"version":3,"sources":["data.js","helpers.js","model.js","view.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","jsonData","JSON","stringify","helpers","getPageTitle","document","getElementById","getContentContainer","model","init","setLocalStorage","data","localStorage","setItem","getLocalStorage","parse","getItem","getPosts","deleteLocalStorage","removeItem","view","loadBlogPosts","createPostMarkup","post","articleEl","createElement","titleEl","titleAnchor","titleContent","createTextNode","postContent","console","log","appendChild","href","postsMarkup","createDocumentFragment","contentContainer","i","length","vanillaPress"],"mappings":"AAAA,YAKA,IAAAA,SACAC,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,cACAC,KAAA,QACAC,MAAA,eACAC,QAAA,iGAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,sBACAC,KAAA,QACAC,MAAA,uBACAC,QAAA,wDAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,WACAC,KAAA,QACAC,MAAA,gBACAC,QAAA,0EAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,YACAC,KAAA,QACAC,MAAA,aACAC,QAAA,sIAEAN,GAAA,EACAC,KAAA,sBACAC,SAAA,sBACAC,KAAA,qBACAC,KAAA,QACAC,MAAA,qBACAC,QAAA,iDAGAC,SAAAC,KAAAC,UAAAV,OC3CAW,UAEAA,SAAAC,aAAA,WACA,MAAAC,UAAAC,eAAA,cAGAH,QAAAI,oBAAA,WACA,MAAAF,UAAAC,eAAA,eCJA,IAAAE,SAKAA,OAAAC,KAAA,WACAD,MAAAE,gBAAAV,WAQAQ,MAAAE,gBAAA,SAAAC,GACAC,aAAAC,QAAA,eAAAF,IAQAH,MAAAM,gBAAA,WACA,MAAAb,MAAAc,MAAAH,aAAAI,QAAA,kBAQAR,MAAAS,SAAA,WACA,GAAAzB,GAAAgB,MAAAM,iBAEA,OAAAtB,IAMAgB,MAAAU,mBAAA,WACAN,aAAAO,WAAA,gBC1CA,IAAAC,QAKAA,MAAAX,KAAA,WACAW,KAAAC,iBASAD,KAAAE,iBAAA,SAAAC,GACA,GAAAC,GAAAnB,SAAAoB,cAAA,WACAC,EAAArB,SAAAoB,cAAA,MACAE,EAAAtB,SAAAoB,cAAA,KACAG,EAAAvB,SAAAwB,eAAAN,EAAAzB,OACAgC,EAAAzB,SAAAoB,cAAA,MAYA,OAVAM,SAAAC,IAAAL,GACAA,EAAAM,YAAAL,GACAD,EAAAO,KAAA,IAAAX,EAAA3B,KACA8B,EAAAO,YAAAN,GAEAG,EAAAG,YAAA5B,SAAAwB,eAAAN,EAAAxB,UAEAyB,EAAAS,YAAAP,GACAF,EAAAS,YAAAH,GAEAN,GAMAJ,KAAAC,cAAA,WAKA,IAAA,GAJA7B,GAAAgB,MAAAS,WACAkB,EAAA9B,SAAA+B,yBACAC,EAAAlC,QAAAI,sBAEA+B,EAAA,EAAAA,EAAA9C,EAAA+C,OAAAD,IACAH,EAAAF,YAAAb,KAAAE,iBAAA9B,EAAA8C,IAGAD,GAAAJ,YAAAE,GCjDA,IAAAK,eACA/B,KAAA,WACAD,MAAAC,OACAW,KAAAX,QAIA+B,cAAA/B","file":"../main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Main JSON object of posts, pages and settings\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!</p>\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"<p>I'm learning JavaScript and super excited!!!</p>\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"<p>I've started working with the REST API in WordPress, what fun!</p>\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"<p>So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data</p>\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"<p>Some more sample content to work with</p>\"\n}];\n\nvar jsonData = JSON.stringify(posts);","'use strict';\n\n// Helper functions\n// -----------------------------------------------------------------------------\nvar helpers = {};\n\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};","'use strict';\n\n// Set up the Model to work with the data\n// -----------------------------------------------------------------------------\n/**\n* Model object\n*/\nvar model = {};\n\n/**\n* Initialize the Model\n*/\nmodel.init = function () {\n  model.setLocalStorage(jsonData);\n};\n\n/**\n* Save the temporary data to the browsers local storage\n*\n* @param data {string} JSON string of the data to be stored\n*/\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', data);\n};\n\n/**\n* Get content from the browsers local storage\n*\n* @return store {object} JavaScript object or array containing the stored site data\n*/\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n* Gets data from the browsers local storage, and sets to a variable for use\n*\n* @return posts {array} An array of post objects\n*/\nmodel.getPosts = function () {\n  var posts = model.getLocalStorage();\n\n  return posts;\n};\n\n/**\n* Deletes data from the browsers local storage\n*/\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};","'use strict';\n\n// View file for displaying content\n// -----------------------------------------------------------------------------\n/**\n* View object\n*/\nvar view = {};\n\n/**\n* Initialize the View\n*/\nview.init = function () {\n  view.loadBlogPosts();\n};\n\n/**\n* Create the markup for the posts\n*\n* @param object {post} Post to create markup for\n* @return object {articleEl} Final post markup\n*/\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  console.log(titleAnchor);\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n\n/**\n* Get the post data from local storage, create markup for each one, and append them to the page\n*/\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};","\"use strict\";\n\n/**\n * The main app object.\n */\nvar vanillaPress = {\n  init: function init() {\n    model.init();\n    view.init();\n  }\n};\n\nvanillaPress.init();"]}