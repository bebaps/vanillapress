{"version":3,"sources":["main.js","data.js","helpers.js","model.js","router.js","view.js","editor.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","pages","data","helpers","getPageTitle","document","getElementById","getContentContainer","getMenu","querySelector","createMenuItem","listItemEl","createElement","appendChild","createLink","pageAnchor","pageAnchorContent","createTextNode","href","getEditorEl","getEditorToggle","getEditorToggleLink","getEditorTitleEl","getEditorContentEl","model","init","setLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","parse","getItem","getPosts","getPost","i","length","getPages","getPage","deleteLocalStorage","removeItem","getContent","getCurrentContent","router","getSlug","loadContent","listenForChanges","window","location","hash","substring","addEventListener","view","clearContent","loadSingle","loadBlogPosts","createMenu","menuMarkup","createDocumentFragment","menuEl","createPostMarkup","post","articleEl","titleEl","titleAnchor","titleContent","postContent","postsMarkup","contentContainer","innerHTML","editor","listener","toggle","editorEl","editorToggle","classList","event","preventDefault","contains","loadEditorForm","formTitle","formContent","value","vanillaPress"],"mappings":"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","file":"main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Arry of post objects for use\n *\n * @type {Array}\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"I'm learning JavaScript and super excited!!!\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"Some more sample content to work with\"\n}];\n\n/**\n * Array of page objects for use\n *\n * @type {Array}\n */\nvar pages = [{\n  \"id\": 6,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"home\",\n  \"type\": \"page\",\n  \"title\": \"Home\",\n  \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n}, {\n  \"id\": 7,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"about\",\n  \"type\": \"page\",\n  \"title\": \"About\",\n  \"content\": \"A little about me!\"\n}, {\n  \"id\": 8,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"blog\",\n  \"type\": \"page\",\n  \"title\": \"Blog\",\n  \"content\": \"Please enjoy my posts\"\n}, {\n  \"id\": 9,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"contact\",\n  \"type\": \"page\",\n  \"title\": \"Contact\",\n  \"content\": \"Drop me a line with any questions :)\"\n}];\n\n/**\n * Turn the posts/pages array into a usable JSON format\n *\n * @type {String}\n */\nvar data = {\n  posts: posts,\n  pages: pages\n};\n'use strict';\n\n/**\n * Helpers object\n *\n * @type {Object}\n */\nvar helpers = {};\n\n/**\n * Get the title of the current page\n *\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\n/**\n * Get the content container of the current page\n *\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};\n\n/**\n * Get the main menu element\n *\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = function () {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Create a new list item for the main menu\n *\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = function (data) {\n  var listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n *\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = function (data) {\n  var pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(data.title);\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  return pageAnchor;\n};\n\n/**\n * Gets the Editor element in the DOM\n *\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = function () {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n *\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = function () {\n  return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = function () {\n  return document.querySelector('#editorToggle a');\n};\n\nhelpers.getEditorTitleEl = function () {\n  return document.getElementById('editTitle');\n};\n\nhelpers.getEditorContentEl = function () {\n  return document.getElementById('editContent');\n};\n'use strict';\n\n/**\n * Model object\n *\n * @type {Object}\n */\nvar model = {};\n\n/**\n * Initialize the Model\n *\n * @method init\n */\nmodel.init = function () {\n  model.setLocalStorage(data);\n};\n\n/**\n * Save the temporary data to the browsers local storage\n *\n * @method setLocalStorage\n * @param  {sting} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Get content from the browsers local storage\n *\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n *\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = function () {\n  var posts = model.getLocalStorage().posts;\n\n  return posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n *\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = function (slug) {\n  var posts = model.getLocalStorage().posts;\n\n  for (var i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n *\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = function () {\n  var pages = model.getLocalStorage().pages;\n\n  return pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n *\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = function (slug) {\n  var pages = model.getLocalStorage().pages;\n\n  for (var i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Deletes data from the browsers local storage\n *\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};\n\n/**\n * Get the content that is currently on the page\n *\n * @method getContent\n * @return {[type]} [description]\n */\nmodel.getContent = function (slug) {\n  var content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if (null === content) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    };\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n *\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = function () {\n  var slug = router.getSlug(),\n      content = void 0;\n\n  if (null === slug) {\n    slug = 'home';\n  }\n\n  content = model.getContent(slug);\n\n  return content;\n};\n'use strict';\n\n/**\n * Router object\n *\n * @type {Object}\n */\nvar router = {};\n\n/**\n * Initialize the Router\n *\n * @method init\n * @return {method} The functions to call when the Router loads\n */\nrouter.init = function () {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n *\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = function () {\n  var slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n};\n\n/**\n * Listen for changes to the URL hash\n *\n * @method listenForChanges\n */\nrouter.listenForChanges = function () {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n/**\n * Load content based upon the current slug\n *\n * @method loadContent\n * @return {method} The method to run based upon the URL hash\n */\nrouter.loadContent = function () {\n  var slug = router.getSlug();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug) {\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n};\n'use strict';\n\n/**\n * View object\n *\n * @type {Object}\n */\nvar view = {};\n\n/**\n * Initialize the View\n *\n * @method init\n */\nview.init = function () {\n  view.createMenu();\n};\n\n/**\n * Display the menu of pages\n *\n * @method createMenu\n */\nview.createMenu = function () {\n  var pages = model.getPages(),\n      menuMarkup = document.createDocumentFragment(),\n      menuEl = helpers.getMenu();\n\n  for (var i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n *\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n *\n * @method loadBlogPosts\n */\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n/**\n * Load a single blog post\n *\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = function (slug) {\n  var content = model.getContent(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n/**\n * Clear the content from the page\n *\n * @method clearContent\n */\nview.clearContent = function () {\n  var titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};\n'use strict';\n\n/**\n * Editor object\n *\n * @type {Object}\n */\nvar editor = {};\n\n/**\n * Initialize the editor\n *\n * @method init\n */\neditor.init = function () {\n  editor.listener();\n};\n\n/**\n * Listens for the editor toggle button\n *\n * @return {Object} Main editor DOM object\n */\neditor.listener = function () {\n  var toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', editor.toggle, false);\n};\n\n/**\n * Controls the toggle for the editor\n *\n * @return {Object} Main toggle element\n */\neditor.toggle = function () {\n  var editorEl = helpers.getEditorEl(),\n      editorToggle = helpers.getEditorToggle();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  event.preventDefault();\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(model.getCurrentContent());\n  }\n};\n\n/**\n * Fill the editor form with the content of the current post or page\n *\n * @method fillEditorForm\n * @param  {[type]} content [description]\n * @return {[type]} [description]\n */\neditor.loadEditorForm = function (content) {\n  var formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content;\n};\n\"use strict\";\n\n/**\n * The primary VanillaPress application object\n *\n * @type {Object}\n */\nvar vanillaPress = {\n  init: function init() {\n    model.init();\n    router.init();\n    view.init();\n    editor.init();\n  }\n};\n\nvanillaPress.init();","/**\n * Arry of post objects for use\n *\n * @type {Array}\n */\nconst posts = [\n  {\n    \"id\": 1,\n    \"date\": \"2016-01-09T22:05:09\",\n    \"modified\": \"2016-01-09T22:05:09\",\n    \"slug\": \"hello-world\",\n    \"type\": \"posts\",\n    \"title\": \"Hello world!\",\n    \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n  },\n  {\n    \"id\": 2,\n    \"date\": \"2016-01-10T22:05:09\",\n    \"modified\": \"2016-01-10T22:05:09\",\n    \"slug\": \"learning-javascript\",\n    \"type\": \"posts\",\n    \"title\": \"Learning JavaScript!\",\n    \"content\": \"I'm learning JavaScript and super excited!!!\"\n  },\n  {\n    \"id\": 3,\n    \"date\": \"2016-01-11T22:05:09\",\n    \"modified\": \"2016-01-11T22:05:09\",\n    \"slug\": \"rest-api\",\n    \"type\": \"posts\",\n    \"title\": \"The REST API!\",\n    \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n  },\n  {\n    \"id\": 4,\n    \"date\": \"2016-01-12T22:05:09\",\n    \"modified\": \"2016-01-12T22:05:09\",\n    \"slug\": \"json-data\",\n    \"type\": \"posts\",\n    \"title\": \"JSON Data!\",\n    \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n  },\n  {\n    \"id\": 5,\n    \"date\": \"2016-01-13T22:05:09\",\n    \"modified\": \"2016-01-13T22:05:09\",\n    \"slug\": \"javascript-project\",\n    \"type\": \"posts\",\n    \"title\": \"JavaScript Project\",\n    \"content\": \"Some more sample content to work with\"\n  }\n];\n\n/**\n * Array of page objects for use\n *\n * @type {Array}\n */\nconst pages = [\n  {\n    \"id\": 6,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"home\",\n    \"type\": \"page\",\n    \"title\": \"Home\",\n    \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n  },\n  {\n    \"id\": 7,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"about\",\n    \"type\": \"page\",\n    \"title\": \"About\",\n    \"content\": \"A little about me!\"\n  },\n  {\n    \"id\": 8,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"blog\",\n    \"type\": \"page\",\n    \"title\": \"Blog\",\n    \"content\": \"Please enjoy my posts\"\n  },\n  {\n    \"id\": 9,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"contact\",\n    \"type\": \"page\",\n    \"title\": \"Contact\",\n    \"content\": \"Drop me a line with any questions :)\"\n  }\n];\n\n/**\n * Turn the posts/pages array into a usable JSON format\n *\n * @type {String}\n */\nconst data = {\n  posts: posts,\n  pages: pages\n};\n","/**\n * Helpers object\n *\n * @type {Object}\n */\nconst helpers = {};\n\n/**\n * Get the title of the current page\n *\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = () => {\n  return document.getElementById('pageTitle');\n}\n\n/**\n * Get the content container of the current page\n *\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = () => {\n  return document.getElementById('pageContent');\n}\n\n/**\n * Get the main menu element\n *\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = () => {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Create a new list item for the main menu\n *\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = (data) => {\n  let listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n *\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = (data) => {\n  let pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(data.title);\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  return pageAnchor;\n};\n\n/**\n * Gets the Editor element in the DOM\n *\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = () => {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n *\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = () => {\n return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = () => {\n  return document.querySelector( '#editorToggle a' );\n};\n\nhelpers.getEditorTitleEl = () => {\n  return document.getElementById('editTitle');\n};\n\nhelpers.getEditorContentEl = () => {\n  return document.getElementById('editContent');\n};\n","/**\n * Model object\n *\n * @type {Object}\n */\nconst model = {};\n\n/**\n * Initialize the Model\n *\n * @method init\n */\nmodel.init = () => {\n  model.setLocalStorage(data);\n};\n\n/**\n * Save the temporary data to the browsers local storage\n *\n * @method setLocalStorage\n * @param  {sting} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = (data) => {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Get content from the browsers local storage\n *\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = () => {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n *\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = () => {\n  let posts = model.getLocalStorage().posts;\n\n  return posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n *\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = (slug) => {\n  let posts = model.getLocalStorage().posts;\n\n  for (let i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n *\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = () => {\n  let pages = model.getLocalStorage().pages;\n\n  return pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n *\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = (slug) => {\n  let pages = model.getLocalStorage().pages;\n\n  for (let i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Deletes data from the browsers local storage\n *\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = () => {\n  localStorage.removeItem('vanillaPress');\n};\n\n/**\n * Get the content that is currently on the page\n *\n * @method getContent\n * @return {[type]} [description]\n */\nmodel.getContent = (slug) => {\n  let content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if ( null === content ) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    }\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n *\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = () => {\n  let slug = router.getSlug(),\n      content;\n\n  if (null === slug) {\n    slug = 'home';\n  }\n\n  content = model.getContent(slug);\n\n  return content;\n};\n","/**\n * Router object\n *\n * @type {Object}\n */\nconst router = {};\n\n/**\n * Initialize the Router\n *\n * @method init\n * @return {method} The functions to call when the Router loads\n */\nrouter.init = () => {\n  router.loadContent();\n  router.listenForChanges();\n}\n\n/**\n * Get the slug from the URL\n *\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = () => {\n  const slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n}\n\n/**\n * Listen for changes to the URL hash\n *\n * @method listenForChanges\n */\nrouter.listenForChanges = () => {\n  window.addEventListener('hashchange', router.loadContent, false);\n}\n\n/**\n * Load content based upon the current slug\n *\n * @method loadContent\n * @return {method} The method to run based upon the URL hash\n */\nrouter.loadContent = () => {\n  const slug = router.getSlug();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug){\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n}\n","/**\n * View object\n *\n * @type {Object}\n */\nconst view = {};\n\n/**\n * Initialize the View\n *\n * @method init\n */\nview.init = () => {\n  view.createMenu();\n};\n\n/**\n * Display the menu of pages\n *\n * @method createMenu\n */\nview.createMenu = () => {\n  let pages = model.getPages(),\n      menuMarkup = document.createDocumentFragment(),\n      menuEl = helpers.getMenu();\n\n  for (var i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n *\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = (post) => {\n  let articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n *\n * @method loadBlogPosts\n */\nview.loadBlogPosts = () => {\n  let posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (let i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n/**\n * Load a single blog post\n *\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = (slug) => {\n  let content = model.getContent(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n/**\n * Clear the content from the page\n *\n * @method clearContent\n */\nview.clearContent = () => {\n  let titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};\n","/**\n * Editor object\n *\n * @type {Object}\n */\nconst editor = {};\n\n/**\n * Initialize the editor\n *\n * @method init\n */\neditor.init = () => {\n  editor.listener();\n};\n\n/**\n * Listens for the editor toggle button\n *\n * @return {Object} Main editor DOM object\n */\neditor.listener = () => {\n  let toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', editor.toggle, false);\n};\n\n/**\n * Controls the toggle for the editor\n *\n * @return {Object} Main toggle element\n */\neditor.toggle = () => {\n  let editorEl = helpers.getEditorEl(),\n      editorToggle = helpers.getEditorToggle();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  event.preventDefault();\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(model.getCurrentContent());\n  }\n};\n\n/**\n * Fill the editor form with the content of the current post or page\n *\n * @method fillEditorForm\n * @param  {[type]} content [description]\n * @return {[type]} [description]\n */\neditor.loadEditorForm = (content) => {\n  let formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content\n};\n","/**\n * The primary VanillaPress application object\n *\n * @type {Object}\n */\nconst vanillaPress = {\n  init: () => {\n    model.init();\n    router.init();\n    view.init();\n    editor.init();\n  }\n};\n\nvanillaPress.init();\n"]}