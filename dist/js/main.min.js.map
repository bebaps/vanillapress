{"version":3,"sources":["main.js","data.js","helpers.js","model.js","router.js","view.js","editor.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","pages","data","helpers","createMenuItem","listItemEl","document","createElement","appendChild","createLink","pageAnchor","pageAnchorContent","createTextNode","href","getLinks","querySelectorAll","getMenu","querySelector","getPageTitle","getElementById","getContentContainer","getEditorEl","getEditorToggle","getEditorToggleLink","getEditorTitleEl","getEditorContentEl","getEditorUpdate","model","init","checkLocalStorage","setLocalStorage","getContent","getPost","getPage","getCurrentContent","router","getSlug","getPosts","getLocalStorage","i","length","getPages","updateContent","storage","Date","forEach","post","toISOString","page","JSON","parse","localStorage","getItem","setItem","stringify","deleteLocalStorage","removeItem","loadContent","listenForChanges","window","location","hash","substring","addEventListener","toggleEl","view","clearContent","loadSingle","loadBlogPosts","editor","currentContent","classList","contains","loadEditorForm","createMenu","postsMarkup","createDocumentFragment","contentContainer","createPostMarkup","titleEl","postContent","innerHTML","updateTitle","contentEl","menuMarkup","menuEl","articleEl","titleAnchor","titleContent","unsavedContent","listener","saveContent","event","preventDefault","animateSaveButton","protectUnsavedContent","confirmed","confirm","value","formTitle","formContent","addFormListeners","button","saving","setTimeout","innerText","saved","formButton","links","link","toggle","editorEl","editorToggle","vanillaPress"],"mappings":"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","file":"main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Arry of post objects for use\n * @type {Array}\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"I'm learning JavaScript and super excited!!!\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"Some more sample content to work with\"\n}];\n\n/**\n * Array of page objects for use\n * @type {Array}\n */\nvar pages = [{\n  \"id\": 6,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"home\",\n  \"type\": \"page\",\n  \"title\": \"Home\",\n  \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n}, {\n  \"id\": 7,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"about\",\n  \"type\": \"page\",\n  \"title\": \"About\",\n  \"content\": \"A little about me!\"\n}, {\n  \"id\": 8,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"blog\",\n  \"type\": \"page\",\n  \"title\": \"Blog\",\n  \"content\": \"Please enjoy my posts\"\n}, {\n  \"id\": 9,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"contact\",\n  \"type\": \"page\",\n  \"title\": \"Contact\",\n  \"content\": \"Drop me a line with any questions :)\"\n}];\n\n/**\n * Turn the posts/pages array into a usable JSON format\n * @type {String}\n */\nvar data = {\n  posts: posts,\n  pages: pages\n};\n'use strict';\n\n/**\n * Helpers object\n * @type {Object}\n */\nvar helpers = {};\n\n/**\n * Create a new list item for the main menu\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = function (data) {\n  var listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = function (data) {\n  var pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(data.title);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  return pageAnchor;\n};\n\n/**\n * Grab all the anchors on the page\n * @method getLinks\n * @return {Node} All the anchor elements on the page\n */\nhelpers.getLinks = function () {\n  return document.querySelectorAll('a');\n};\n\n/**\n * Get the main menu element\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = function () {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Get the title of the current page\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\n/**\n * Get the content container of the current page\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};\n\n/**\n * Gets the Editor element in the DOM\n * @method getEditorEl\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = function () {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n * @method getEditorToggle\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = function () {\n  return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @method getEditorToggleLink\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = function () {\n  return document.querySelector('#editorToggle a');\n};\n\n/**\n * Get the title input element from the editor\n * @method getEditorTitleEl\n * @return {Object} Editor title input\n */\nhelpers.getEditorTitleEl = function () {\n  return document.getElementById('editTitle');\n};\n\n/**\n * Get the content textarea from the editor\n * @method getEditorContentEl\n * @return {Object} Editor textarea\n */\nhelpers.getEditorContentEl = function () {\n  return document.getElementById('editContent');\n};\n\n/**\n * Get the editor button\n * @method getEditorUpdate\n * @return {Object} Editor button\n */\nhelpers.getEditorUpdate = function () {\n  return document.getElementById('editUpdateBtn');\n};\n'use strict';\n\n/**\n * Model object\n * @type {Object}\n */\nvar model = {};\n\n/**\n * Initialize the Model\n * @method init\n */\nmodel.init = function () {\n  if (!model.checkLocalStorage()) {\n    model.setLocalStorage(data);\n  }\n};\n\n/**\n * Get the content that is currently on the page or generate 404 text\n * @method getContent\n * @return {Object} Object containing the content for the current page\n */\nmodel.getContent = function (slug) {\n  var content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if (null === content) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    };\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = function () {\n  var slug = router.getSlug(),\n      content = void 0;\n\n  if (null === slug) {\n    slug = 'home';\n  }\n\n  content = model.getContent(slug);\n\n  return content;\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = function () {\n  var posts = model.getLocalStorage().posts;\n\n  return posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = function (slug) {\n  var posts = model.getLocalStorage().posts;\n\n  for (var i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = function () {\n  var pages = model.getLocalStorage().pages;\n\n  return pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = function (slug) {\n  var pages = model.getLocalStorage().pages;\n\n  for (var i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Update the content in the page with the content from the editor\n * @method updateContent\n * @param  {Object}      content The content from the editor\n */\nmodel.updateContent = function (content) {\n  var storage = model.getLocalStorage(),\n      date = new Date();\n\n  if ('post' === content.type) {\n    storage.posts.forEach(function (post) {\n      if (content.id === post.id) {\n        post.title = content.title;\n        post.content = content.content;\n        post.modified = date.toISOString();\n      }\n    });\n  }\n\n  if ('page' === content.type) {\n    storage.pages.forEach(function (page) {\n      if (content.id === page.id) {\n        page.title = content.title;\n        page.content = content.content;\n        page.modified = date.toISOString();\n      }\n    });\n  }\n\n  model.setLocalStorage(storage);\n};\n\n/**\n * Check if there is data in the browsers local storage\n * @method checkLocalStorage\n * @return {Boolean}        True or false\n */\nmodel.checkLocalStorage = function () {\n  var storage = model.getLocalStorage();\n\n  if (null === storage) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Get content from the browsers local storage\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Save the temporary data to the browsers local storage\n * @method setLocalStorage\n * @param  {sting} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Deletes data from the browsers local storage\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};\n'use strict';\n\n/**\n * Router object\n * @type {Object}\n */\nvar router = {};\n\n/**\n * Initialize the Router\n * @method init\n */\nrouter.init = function () {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = function () {\n  var slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n};\n\n/**\n * Listen for changes to the URL hash\n * @method listenForChanges\n */\nrouter.listenForChanges = function () {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n/**\n * Load content based upon the current slug\n * @method loadContent\n */\nrouter.loadContent = function () {\n  var slug = router.getSlug(),\n      toggleEl = helpers.getEditorToggle();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug) {\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n\n  editor.currentContent = model.getCurrentContent(slug);\n\n  if (false === toggleEl.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n  }\n};\n'use strict';\n\n/**\n * View object\n * @type {Object}\n */\nvar view = {};\n\n/**\n * Initialize the View\n * @method init\n */\nview.init = function () {\n  view.createMenu();\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n * @method loadBlogPosts\n */\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n/**\n * Load a single blog post\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = function (slug) {\n  var content = model.getContent(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n/**\n * Update the page title with content in the editor\n * @method updateTitleFromForm\n */\nview.updateTitle = function (title) {\n  var titleEl = helpers.getPageTitle();\n\n  titleEl.innerHTML = title;\n};\n\n/**\n * Update the page content with content in the editor\n * @method updateContentFromForm\n */\nview.updateContent = function (content) {\n  var contentEl = helpers.getContentContainer();\n\n  contentEl.innerHTML = content;\n};\n\n/**\n * Clear the content from the page\n * @method clearContent\n */\nview.clearContent = function () {\n  var titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};\n\n/**\n * Display the menu of pages\n * @method createMenu\n */\nview.createMenu = function () {\n  var pages = model.getPages(),\n      menuMarkup = document.createDocumentFragment(),\n      menuEl = helpers.getMenu();\n\n  for (var i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n'use strict';\n\n/**\n * Editor object\n * @type {Object}\n */\nvar editor = {};\n\n/**\n * The current content inside of the editor\n * @type {String}\n */\neditor.currentContent = '';\n\n/**\n * If there is unsaved content in the editor\n * @type {Boolean}\n */\neditor.unsavedContent = false;\n\n/**\n * Initialize the editor\n * @method init\n */\neditor.init = function () {\n  editor.listener();\n};\n\n/**\n * Save the content in the page with the content from the editor\n * @method updateContent\n */\neditor.saveContent = function () {\n  event.preventDefault();\n  model.updateContent(editor.currentContent);\n  editor.unsavedContent = false;\n  editor.animateSaveButton();\n};\n\n/**\n * Inform the user that the content in the editor is not saved\n * @method protectUnsavedContent\n */\neditor.protectUnsavedContent = function () {\n  if (true === editor.unsavedContent) {\n    var confirmed = window.confirm('You should save your changes first!');\n\n    if (!confirmed) {\n      event.preventDefault();\n    } else {\n      editor.unsavedContent = false;\n    }\n  }\n};\n\n/**\n * Update the content with the title from the editor\n * @method updateTitle\n */\neditor.updateTitle = function () {\n  var title = helpers.getEditorTitleEl().value;\n\n  editor.currentContent.title = title;\n  editor.unsavedContent = true;\n  view.updateTitle(title);\n};\n\n/**\n * Update the content with the content from the editor\n * @method updateContent\n */\neditor.updateContent = function () {\n  var content = helpers.getEditorContentEl().value;\n\n  editor.currentContent.content = content;\n  editor.unsavedContent = true;\n  view.updateContent(content);\n};\n\n/**\n * Fill the editor form with the content of the current post or page\n * @method fillEditorForm\n * @param  {Obejct} content Content object for the current page or post\n */\neditor.loadEditorForm = function (content) {\n  var formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content;\n\n  editor.addFormListeners();\n};\n\neditor.animateSaveButton = function () {\n  var button = helpers.getEditorUpdate(),\n      saving = function saving() {\n    setTimeout(function () {\n      button.innerText = 'Saved';\n      saved();\n    }, 1000);\n  },\n      saved = function saved() {\n    setTimeout(function () {\n      button.innerText = 'Update';\n    }, 900);\n  };\n\n  button.innerText = 'Saving...';\n  saving();\n};\n\n/**\n * Listen to the form inputs for content changes\n * @method addFormListeners\n */\neditor.addFormListeners = function () {\n  var formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl(),\n      formButton = helpers.getEditorUpdate(),\n      links = helpers.getLinks();\n\n  formTitle.addEventListener('input', editor.updateTitle, false);\n  formContent.addEventListener('input', editor.updateContent, false);\n  formButton.addEventListener('click', editor.saveContent, false);\n\n  links.forEach(function (link) {\n    link.addEventListener('click', editor.protectUnsavedContent, false);\n  });\n};\n\n/**\n * Listens for the editor toggle button\n * @method listener\n */\neditor.listener = function () {\n  var toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', function () {\n    editor.toggle();\n    event.preventDefault();\n  }, false);\n};\n\n/**\n * Controls the toggle for the editor\n * @method toggle\n */\neditor.toggle = function () {\n  var editorEl = helpers.getEditorEl(),\n      editorToggle = helpers.getEditorToggle();\n\n  editor.currentContent = model.getCurrentContent();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n  }\n};\n\"use strict\";\n\n/**\n * The primary VanillaPress application object\n * @type {Object}\n */\nvar vanillaPress = {};\n\n/**\n * Initialize the app\n * @method init\n */\nvanillaPress.init = function () {\n  model.init();\n  router.init();\n  view.init();\n  editor.init();\n};\n\nvanillaPress.init();","/**\n * Arry of post objects for use\n * @type {Array}\n */\nconst posts = [\n  {\n    \"id\": 1,\n    \"date\": \"2016-01-09T22:05:09\",\n    \"modified\": \"2016-01-09T22:05:09\",\n    \"slug\": \"hello-world\",\n    \"type\": \"posts\",\n    \"title\": \"Hello world!\",\n    \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n  },\n  {\n    \"id\": 2,\n    \"date\": \"2016-01-10T22:05:09\",\n    \"modified\": \"2016-01-10T22:05:09\",\n    \"slug\": \"learning-javascript\",\n    \"type\": \"posts\",\n    \"title\": \"Learning JavaScript!\",\n    \"content\": \"I'm learning JavaScript and super excited!!!\"\n  },\n  {\n    \"id\": 3,\n    \"date\": \"2016-01-11T22:05:09\",\n    \"modified\": \"2016-01-11T22:05:09\",\n    \"slug\": \"rest-api\",\n    \"type\": \"posts\",\n    \"title\": \"The REST API!\",\n    \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n  },\n  {\n    \"id\": 4,\n    \"date\": \"2016-01-12T22:05:09\",\n    \"modified\": \"2016-01-12T22:05:09\",\n    \"slug\": \"json-data\",\n    \"type\": \"posts\",\n    \"title\": \"JSON Data!\",\n    \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n  },\n  {\n    \"id\": 5,\n    \"date\": \"2016-01-13T22:05:09\",\n    \"modified\": \"2016-01-13T22:05:09\",\n    \"slug\": \"javascript-project\",\n    \"type\": \"posts\",\n    \"title\": \"JavaScript Project\",\n    \"content\": \"Some more sample content to work with\"\n  }\n];\n\n/**\n * Array of page objects for use\n * @type {Array}\n */\nconst pages = [\n  {\n    \"id\": 6,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"home\",\n    \"type\": \"page\",\n    \"title\": \"Home\",\n    \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n  },\n  {\n    \"id\": 7,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"about\",\n    \"type\": \"page\",\n    \"title\": \"About\",\n    \"content\": \"A little about me!\"\n  },\n  {\n    \"id\": 8,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"blog\",\n    \"type\": \"page\",\n    \"title\": \"Blog\",\n    \"content\": \"Please enjoy my posts\"\n  },\n  {\n    \"id\": 9,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"contact\",\n    \"type\": \"page\",\n    \"title\": \"Contact\",\n    \"content\": \"Drop me a line with any questions :)\"\n  }\n];\n\n/**\n * Turn the posts/pages array into a usable JSON format\n * @type {String}\n */\nconst data = {\n  posts: posts,\n  pages: pages\n};\n","/**\n * Helpers object\n * @type {Object}\n */\nconst helpers = {};\n\n/**\n * Create a new list item for the main menu\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = (data) => {\n  let listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = (data) => {\n  let pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(data.title);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  return pageAnchor;\n};\n\n/**\n * Grab all the anchors on the page\n * @method getLinks\n * @return {Node} All the anchor elements on the page\n */\nhelpers.getLinks = () => {\n  return document.querySelectorAll('a');\n};\n\n/**\n * Get the main menu element\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = () => {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Get the title of the current page\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = () => {\n  return document.getElementById('pageTitle');\n}\n\n/**\n * Get the content container of the current page\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = () => {\n  return document.getElementById('pageContent');\n}\n\n/**\n * Gets the Editor element in the DOM\n * @method getEditorEl\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = () => {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n * @method getEditorToggle\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = () => {\n return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @method getEditorToggleLink\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = () => {\n  return document.querySelector( '#editorToggle a' );\n};\n\n/**\n * Get the title input element from the editor\n * @method getEditorTitleEl\n * @return {Object} Editor title input\n */\nhelpers.getEditorTitleEl = () => {\n  return document.getElementById('editTitle');\n};\n\n/**\n * Get the content textarea from the editor\n * @method getEditorContentEl\n * @return {Object} Editor textarea\n */\nhelpers.getEditorContentEl = () => {\n  return document.getElementById('editContent');\n};\n\n/**\n * Get the editor button\n * @method getEditorUpdate\n * @return {Object} Editor button\n */\nhelpers.getEditorUpdate = () => {\n  return document.getElementById('editUpdateBtn');\n};\n","/**\n * Model object\n * @type {Object}\n */\nconst model = {};\n\n/**\n * Initialize the Model\n * @method init\n */\nmodel.init = () => {\n  if (!model.checkLocalStorage()) {\n    model.setLocalStorage(data);\n  }\n};\n\n/**\n * Get the content that is currently on the page or generate 404 text\n * @method getContent\n * @return {Object} Object containing the content for the current page\n */\nmodel.getContent = (slug) => {\n  let content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if (null === content) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    }\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = () => {\n  let slug = router.getSlug(),\n      content;\n\n  if (null === slug) {\n    slug = 'home';\n  }\n\n  content = model.getContent(slug);\n\n  return content;\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = () => {\n  let posts = model.getLocalStorage().posts;\n\n  return posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = (slug) => {\n  let posts = model.getLocalStorage().posts;\n\n  for (let i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = () => {\n  let pages = model.getLocalStorage().pages;\n\n  return pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = (slug) => {\n  let pages = model.getLocalStorage().pages;\n\n  for (let i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Update the content in the page with the content from the editor\n * @method updateContent\n * @param  {Object}      content The content from the editor\n */\nmodel.updateContent = (content) => {\n  let storage = model.getLocalStorage(),\n      date = new Date();\n\n  if ('post' === content.type) {\n    storage.posts.forEach(function(post) {\n      if (content.id === post.id) {\n        post.title = content.title;\n        post.content = content.content;\n        post.modified = date.toISOString();\n      }\n    });\n  }\n\n  if ('page' === content.type) {\n    storage.pages.forEach(function(page) {\n      if (content.id === page.id) {\n        page.title = content.title;\n        page.content = content.content;\n        page.modified = date.toISOString();\n      }\n    });\n  }\n\n  model.setLocalStorage(storage);\n};\n\n/**\n * Check if there is data in the browsers local storage\n * @method checkLocalStorage\n * @return {Boolean}        True or false\n */\nmodel.checkLocalStorage = () => {\n  let storage = model.getLocalStorage();\n\n  if (null === storage) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Get content from the browsers local storage\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = () => {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Save the temporary data to the browsers local storage\n * @method setLocalStorage\n * @param  {sting} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = (data) => {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Deletes data from the browsers local storage\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = () => {\n  localStorage.removeItem('vanillaPress');\n};\n","/**\n * Router object\n * @type {Object}\n */\nconst router = {};\n\n/**\n * Initialize the Router\n * @method init\n */\nrouter.init = () => {\n  router.loadContent();\n  router.listenForChanges();\n}\n\n/**\n * Get the slug from the URL\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = () => {\n  const slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substring(1);\n  }\n}\n\n/**\n * Listen for changes to the URL hash\n * @method listenForChanges\n */\nrouter.listenForChanges = () => {\n  window.addEventListener('hashchange', router.loadContent, false);\n}\n\n/**\n * Load content based upon the current slug\n * @method loadContent\n */\nrouter.loadContent = () => {\n  const slug = router.getSlug(),\n        toggleEl = helpers.getEditorToggle();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug){\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n\n  editor.currentContent = model.getCurrentContent(slug);\n\n  if (false === toggleEl.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n  }\n}\n","/**\n * View object\n * @type {Object}\n */\nconst view = {};\n\n/**\n * Initialize the View\n * @method init\n */\nview.init = () => {\n  view.createMenu();\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n * @method loadBlogPosts\n */\nview.loadBlogPosts = () => {\n  let posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      contentContainer = helpers.getContentContainer();\n\n  for (let i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n};\n\n/**\n * Load a single blog post\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = (slug) => {\n  let content = model.getContent(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n/**\n * Update the page title with content in the editor\n * @method updateTitleFromForm\n */\nview.updateTitle = (title) => {\n  let titleEl = helpers.getPageTitle();\n\n  titleEl.innerHTML = title;\n};\n\n/**\n * Update the page content with content in the editor\n * @method updateContentFromForm\n */\nview.updateContent = (content) => {\n  let contentEl = helpers.getContentContainer();\n\n  contentEl.innerHTML = content;\n};\n\n/**\n * Clear the content from the page\n * @method clearContent\n */\nview.clearContent = () => {\n  let titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};\n\n/**\n * Display the menu of pages\n * @method createMenu\n */\nview.createMenu = () => {\n  let pages = model.getPages(),\n      menuMarkup = document.createDocumentFragment(),\n      menuEl = helpers.getMenu();\n\n  for (var i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = (post) => {\n  let articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleAnchor = document.createElement('a'),\n      titleContent = document.createTextNode(post.title),\n      postContent = document.createElement('div');\n\n  titleAnchor.appendChild(titleContent);\n  titleAnchor.href = '#' + post.slug;\n  titleEl.appendChild(titleAnchor);\n\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n","/**\n * Editor object\n * @type {Object}\n */\nconst editor = {};\n\n/**\n * The current content inside of the editor\n * @type {String}\n */\neditor.currentContent = '';\n\n/**\n * If there is unsaved content in the editor\n * @type {Boolean}\n */\neditor.unsavedContent = false;\n\n/**\n * Initialize the editor\n * @method init\n */\neditor.init = () => {\n  editor.listener();\n};\n\n/**\n * Save the content in the page with the content from the editor\n * @method updateContent\n */\neditor.saveContent = () => {\n  event.preventDefault();\n  model.updateContent(editor.currentContent);\n  editor.unsavedContent = false;\n  editor.animateSaveButton();\n};\n\n/**\n * Inform the user that the content in the editor is not saved\n * @method protectUnsavedContent\n */\neditor.protectUnsavedContent = () => {\n  if (true === editor.unsavedContent) {\n    const confirmed = window.confirm('You should save your changes first!');\n\n    if (!confirmed) {\n      event.preventDefault();\n    } else {\n      editor.unsavedContent = false;\n    }\n  }\n};\n\n/**\n * Update the content with the title from the editor\n * @method updateTitle\n */\neditor.updateTitle = () => {\n  const title = helpers.getEditorTitleEl().value;\n\n  editor.currentContent.title = title;\n  editor.unsavedContent = true;\n  view.updateTitle(title);\n}\n\n/**\n * Update the content with the content from the editor\n * @method updateContent\n */\neditor.updateContent = () => {\n  const content = helpers.getEditorContentEl().value;\n\n  editor.currentContent.content = content;\n  editor.unsavedContent = true;\n  view.updateContent(content);\n}\n\n/**\n * Fill the editor form with the content of the current post or page\n * @method fillEditorForm\n * @param  {Obejct} content Content object for the current page or post\n */\neditor.loadEditorForm = (content) => {\n  let formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content;\n\n  editor.addFormListeners();\n};\n\neditor.animateSaveButton = () => {\n  const button = helpers.getEditorUpdate(),\n        saving = () => {\n          setTimeout(() => {\n            button.innerText = 'Saved';\n            saved();\n          }, 1000);\n        },\n        saved = () => {\n          setTimeout(() => {\n            button.innerText = 'Update';\n          }, 900);\n        };\n\n        button.innerText = 'Saving...';\n        saving();\n};\n\n/**\n * Listen to the form inputs for content changes\n * @method addFormListeners\n */\neditor.addFormListeners = () => {\n  let formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl(),\n      formButton = helpers.getEditorUpdate(),\n      links = helpers.getLinks();\n\n  formTitle.addEventListener('input', editor.updateTitle, false);\n  formContent.addEventListener('input', editor.updateContent, false);\n  formButton.addEventListener('click', editor.saveContent, false);\n\n  links.forEach((link) => {\n    link.addEventListener('click', editor.protectUnsavedContent, false);\n  });\n};\n\n/**\n * Listens for the editor toggle button\n * @method listener\n */\neditor.listener = () => {\n  let toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', function() {\n    editor.toggle();\n    event.preventDefault();\n  }, false);\n};\n\n/**\n * Controls the toggle for the editor\n * @method toggle\n */\neditor.toggle = () => {\n  let editorEl = helpers.getEditorEl(),\n      editorToggle = helpers.getEditorToggle();\n\n  editor.currentContent = model.getCurrentContent();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n  }\n};\n","/**\n * The primary VanillaPress application object\n * @type {Object}\n */\nconst vanillaPress = {};\n\n/**\n * Initialize the app\n * @method init\n */\nvanillaPress.init = () => {\n  model.init();\n  router.init();\n  view.init();\n  editor.init();\n};\n\nvanillaPress.init();\n"]}