{"version":3,"sources":["main.js","data.js","helpers.js","model.js","router.js","view.js","editor.js","app.js"],"names":["posts","id","date","modified","slug","type","title","content","pages","settings","openEditor","data","helpers","createMenuItem","listItemEl","document","createElement","appendChild","createLink","pageAnchor","pageAnchorContent","createTextNode","href","getMenu","querySelector","getPageTitle","getElementById","getLinks","querySelectorAll","getContentContainer","getEditorEl","getEditorToggle","getEditorToggleLink","getEditorTitleEl","getEditorContentEl","getEditorUpdate","model","init","checkLocalStorage","setLocalStorage","getContent","getPost","getPage","getCurrentContent","router","getSlug","getPosts","getLocalStorage","i","length","getPages","updateContent","storage","Date","forEach","post","toISOString","page","updateEditorSettings","editorState","getEditorSettings","JSON","parse","localStorage","getItem","setItem","stringify","deleteLocalStorage","removeItem","loadContent","listenForChanges","window","location","hash","substr","addEventListener","editorEl","view","clearContent","loadSingle","loadBlogPosts","editor","currentContent","classList","contains","loadEditorForm","createMenu","postsMarkup","createDocumentFragment","titleEl","contentContainer","createPostMarkup","innerHTML","postContent","updateTitleAndContent","updateTitle","contentEl","menuMarkup","menuEl","articleEl","titleLink","unsavedContent","listener","getEditorState","saveContent","event","preventDefault","animateSaveButton","value","formTitle","formContent","setAttribute","removeAttribute","addFormListeners","button","saved","setTimeout","innerText","saving","formButton","links","link","protectUnsavedContent","confirmed","confirm","toggle","hidden","editorToggle","removeEventListener","vanillaPress"],"mappings":"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","file":"main.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Array of post objects for use\n * @type {Array}\n */\nvar posts = [{\n  \"id\": 1,\n  \"date\": \"2016-01-09T22:05:09\",\n  \"modified\": \"2016-01-09T22:05:09\",\n  \"slug\": \"hello-world\",\n  \"type\": \"posts\",\n  \"title\": \"Hello world!\",\n  \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n}, {\n  \"id\": 2,\n  \"date\": \"2016-01-10T22:05:09\",\n  \"modified\": \"2016-01-10T22:05:09\",\n  \"slug\": \"learning-javascript\",\n  \"type\": \"posts\",\n  \"title\": \"Learning JavaScript!\",\n  \"content\": \"I'm learning JavaScript and super excited!!!\"\n}, {\n  \"id\": 3,\n  \"date\": \"2016-01-11T22:05:09\",\n  \"modified\": \"2016-01-11T22:05:09\",\n  \"slug\": \"rest-api\",\n  \"type\": \"posts\",\n  \"title\": \"The REST API!\",\n  \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n}, {\n  \"id\": 4,\n  \"date\": \"2016-01-12T22:05:09\",\n  \"modified\": \"2016-01-12T22:05:09\",\n  \"slug\": \"json-data\",\n  \"type\": \"posts\",\n  \"title\": \"JSON Data!\",\n  \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n}, {\n  \"id\": 5,\n  \"date\": \"2016-01-13T22:05:09\",\n  \"modified\": \"2016-01-13T22:05:09\",\n  \"slug\": \"javascript-project\",\n  \"type\": \"posts\",\n  \"title\": \"JavaScript Project\",\n  \"content\": \"Some more sample content to work with\"\n}];\n\n/**\n * Array of page objects for use\n * @type {Array}\n */\nvar pages = [{\n  \"id\": 6,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"home\",\n  \"type\": \"page\",\n  \"title\": \"Home\",\n  \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n}, {\n  \"id\": 7,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"about\",\n  \"type\": \"page\",\n  \"title\": \"About\",\n  \"content\": \"A little about me!\"\n}, {\n  \"id\": 8,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"blog\",\n  \"type\": \"page\",\n  \"title\": \"Blog\",\n  \"content\": \"Please enjoy my posts\"\n}, {\n  \"id\": 9,\n  \"date\": \"2016-01-18T22:05:09\",\n  \"modified\": \"2016-01-18T22:05:09\",\n  \"slug\": \"contact\",\n  \"type\": \"page\",\n  \"title\": \"Contact\",\n  \"content\": \"Drop me a line with any questions :)\"\n}];\n\n/**\n * Settings for the editor\n * @type {String}\n */\nvar settings = {\n  \"openEditor\": \"true\"\n};\n\n/**\n * Turn the posts/pages array into a usable JSON format\n * @type {String}\n */\nvar data = {\n  posts: posts,\n  pages: pages,\n  settings: settings\n};\n'use strict';\n\n/**\n * Helpers object\n * @type {Object}\n */\nvar helpers = {};\n\n/**\n * Create a new list item for the main menu\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = function (data) {\n  var listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = function (data) {\n  var pageAnchor = document.createElement('a'),\n      pageAnchorContent = document.createTextNode(data.title);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  return pageAnchor;\n};\n\n/**\n * Get the main menu element\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = function () {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Get the title of the current page\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = function () {\n  return document.getElementById('pageTitle');\n};\n\n/**\n * Grab all the anchors on the page\n * @method getLinks\n * @return {NodeList} All the anchor elements on the page\n */\nhelpers.getLinks = function () {\n  return document.querySelectorAll('a');\n};\n\n/**\n * Get the content container of the current page\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = function () {\n  return document.getElementById('pageContent');\n};\n\n/**\n * Gets the Editor element in the DOM\n * @method getEditorEl\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = function () {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n * @method getEditorToggle\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = function () {\n  return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @method getEditorToggleLink\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = function () {\n  return document.querySelector('#editorToggle a');\n};\n\n/**\n * Get the title input element from the editor\n * @method getEditorTitleEl\n * @return {Object} Editor title input\n */\nhelpers.getEditorTitleEl = function () {\n  return document.getElementById('editTitle');\n};\n\n/**\n * Get the content textarea from the editor\n * @method getEditorContentEl\n * @return {Object} Editor textarea\n */\nhelpers.getEditorContentEl = function () {\n  return document.getElementById('editContent');\n};\n\n/**\n * Get the editor button\n * @method getEditorUpdate\n * @return {Object} Editor button\n */\nhelpers.getEditorUpdate = function () {\n  return document.getElementById('editUpdateBtn');\n};\n'use strict';\n\n/**\n * Model object\n * @type {Object}\n */\nvar model = {};\n\n/**\n * Initialize the Model\n * @method init\n */\nmodel.init = function () {\n  if (!model.checkLocalStorage()) {\n    model.setLocalStorage(data);\n  }\n};\n\n/**\n * Get the content that is currently on the page or generate 404 text\n * @method getContent\n * @return {Object} Object containing the content for the current page\n */\nmodel.getContent = function (slug) {\n  var content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if (null === content) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    };\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = function () {\n  var slug = router.getSlug(),\n      content = model.getContent(slug);\n\n  return content;\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = function () {\n  return model.getLocalStorage().posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = function (slug) {\n  var posts = model.getLocalStorage().posts;\n\n  for (var i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = function () {\n  return model.getLocalStorage().pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = function (slug) {\n  var pages = model.getLocalStorage().pages;\n\n  if (null === slug) slug = 'home';\n\n  for (var i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Update the content in the page with the content from the editor\n * @method updateContent\n * @param  {Object}      content The content from the editor\n */\nmodel.updateContent = function (content) {\n  var storage = model.getLocalStorage(),\n      date = new Date();\n\n  if ('post' === content.type) {\n    storage.posts.forEach(function (post) {\n      if (content.id === post.id) {\n        post.title = content.title;\n        post.content = content.content;\n        post.modified = date.toISOString();\n      }\n    });\n  }\n\n  if ('page' === content.type) {\n    storage.pages.forEach(function (page) {\n      if (content.id === page.id) {\n        page.title = content.title;\n        page.content = content.content;\n        page.modified = date.toISOString();\n      }\n    });\n  }\n\n  model.setLocalStorage(storage);\n};\n\n/**\n * Update the editor settings in local storage\n * @method updateEditorSettings\n * @param  {Boolean} editorState\n */\nmodel.updateEditorSettings = function (editorState) {\n  var storage = model.getLocalStorage();\n\n  storage.settings.openEditor = editorState;\n  model.setLocalStorage(storage);\n};\n\n/**\n * Get the editor settings from local storage\n * @method getEditorSettings\n * @return {String}\n */\nmodel.getEditorSettings = function () {\n  var storage = model.getLocalStorage();\n\n  return storage.settings.openEditor;\n};\n\n/**\n * Check if there is data in the browsers local storage\n * @method checkLocalStorage\n * @return {Boolean}        True or false\n */\nmodel.checkLocalStorage = function () {\n  var storage = model.getLocalStorage();\n\n  if (null === storage) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n/**\n * Get content from the browsers local storage\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = function () {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Save the temporary data to the browsers local storage\n * @method setLocalStorage\n * @param  {Object} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = function (data) {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Deletes data from the browsers local storage\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = function () {\n  localStorage.removeItem('vanillaPress');\n};\n'use strict';\n\n/**\n * Router object\n * @type {Object}\n */\nvar router = {};\n\n/**\n * Initialize the Router\n * @method init\n */\nrouter.init = function () {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = function () {\n  var slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substr(1);\n  }\n};\n\n/**\n * Listen for changes to the URL hash\n * @method listenForChanges\n */\nrouter.listenForChanges = function () {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n/**\n * Load content based upon the current slug\n * @method loadContent\n */\nrouter.loadContent = function () {\n  var slug = router.getSlug(),\n      content = model.getContent(slug),\n      editorEl = helpers.getEditorEl();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug) {\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n\n  editor.currentContent = content;\n\n  if (false === editorEl.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n  }\n};\n'use strict';\n\n/**\n * View object\n * @type {Object}\n */\nvar view = {};\n\n/**\n * Initialize the View\n * @method init\n */\nview.init = function () {\n  view.createMenu();\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n * @method loadBlogPosts\n */\nview.loadBlogPosts = function () {\n  var posts = model.getPosts(),\n      postsMarkup = document.createDocumentFragment(),\n      titleEl = helpers.getPageTitle(),\n      contentContainer = helpers.getContentContainer();\n\n  for (var i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n  titleEl.innerHTML = 'Blog Posts';\n};\n\n/**\n * Load a single blog post\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = function (slug) {\n  var content = model.getContent(slug),\n      titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n//Updates the main title and content for a page or post\nview.updateTitleAndContent = function (content) {\n  view.updateTitle(content.title);\n  view.updateContent(content.content);\n};\n\n/**\n * Update the page title with content in the editor\n * @method updateTitleFromForm\n */\nview.updateTitle = function (title) {\n  var titleEl = helpers.getPageTitle();\n\n  titleEl.innerHTML = title;\n};\n\n/**\n * Update the page content with content in the editor\n * @method updateContentFromForm\n */\nview.updateContent = function (content) {\n  var contentEl = helpers.getContentContainer();\n\n  contentEl.innerHTML = content;\n};\n\n/**\n * Clear the content from the page\n * @method clearContent\n */\nview.clearContent = function () {\n  var titleEl = helpers.getPageTitle(),\n      postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};\n\n/**\n * Display the menu of pages\n * @method createMenu\n */\nview.createMenu = function () {\n  var pages = model.getPages(),\n      menuMarkup = document.createDocumentFragment(),\n      menuEl = helpers.getMenu();\n\n  for (var i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = function (post) {\n  var articleEl = document.createElement('article'),\n      titleEl = document.createElement('h2'),\n      titleLink = helpers.createLink(post),\n      postContent = document.createElement('div');\n\n  titleEl.appendChild(titleLink);\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n'use strict';\n\n/**\n * Editor object\n * @type {Object}\n */\nvar editor = {};\n\n/**\n * The current content inside of the editor\n * @type {String}\n */\neditor.currentContent = '';\n\n/**\n * If there is unsaved content in the editor\n * @type {Boolean}\n */\neditor.unsavedContent = false;\n\n/**\n * Initialize the editor\n * @method init\n */\neditor.init = function () {\n  editor.listener();\n  editor.getEditorState();\n};\n\n/**\n * Save the content in the page with the content from the editor\n * @method updateContent\n */\neditor.saveContent = function () {\n  event.preventDefault();\n  model.updateContent(editor.currentContent);\n  editor.unsavedContent = false;\n  editor.animateSaveButton();\n};\n\n/**\n * Update the content with the title from the editor\n * @method updateTitle\n */\neditor.updateTitle = function () {\n  var title = helpers.getEditorTitleEl().value;\n\n  editor.currentContent.title = title;\n  editor.unsavedContent = true;\n  view.updateTitle(title);\n};\n\n/**\n * Update the content with the content from the editor\n * @method updateContent\n */\neditor.updateContent = function () {\n  var content = helpers.getEditorContentEl().value;\n\n  editor.currentContent.content = content;\n  editor.unsavedContent = true;\n  view.updateContent(content);\n};\n\n/**\n * Fill the editor form with the content of the current post or page\n * @method fillEditorForm\n * @param  {Object} content Content object for the current page or post\n */\neditor.loadEditorForm = function (content) {\n  var formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content;\n\n  if ('blog' === content.slug) {\n    formContent.setAttribute('readonly', 'readonly');\n  } else {\n    formContent.removeAttribute('readonly');\n  }\n\n  editor.addFormListeners();\n};\n\n//Add comment\neditor.animateSaveButton = function () {\n  var button = helpers.getEditorUpdate(),\n      saved = function saved() {\n    setTimeout(function () {\n      button.innerText = 'Update';\n    }, 1000);\n  },\n      saving = function saving() {\n    setTimeout(function () {\n      button.innerText = 'Saved!';\n      saved();\n    }, 900);\n  };\n\n  button.innerText = 'Saving...';\n  saving();\n};\n\n/**\n * Listen to the form inputs for content changes\n * @method addFormListeners\n */\neditor.addFormListeners = function () {\n  var formTitle = helpers.getEditorTitleEl(),\n      formContent = helpers.getEditorContentEl(),\n      formButton = helpers.getEditorUpdate(),\n      links = helpers.getLinks();\n\n  formTitle.addEventListener('input', editor.updateTitle, false);\n  formContent.addEventListener('input', editor.updateContent, false);\n  formButton.addEventListener('click', editor.saveContent, false);\n\n  links.forEach(function (link) {\n    link.addEventListener('click', editor.protectUnsavedContent, false);\n  });\n};\n\n/**\n * Inform the user that the content in the editor is not saved\n * @method protectUnsavedContent\n */\neditor.protectUnsavedContent = function () {\n  if (true === editor.unsavedContent) {\n    var confirmed = window.confirm('You should save your changes first!');\n\n    if (false === confirmed) {\n      event.preventDefault();\n    } else {\n      editor.unsavedContent = false;\n    }\n  }\n};\n\n/**\n * Listens for the editor toggle button\n * @method listener\n */\neditor.listener = function () {\n  var toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', function () {\n    editor.toggle();\n    event.preventDefault();\n  }, false);\n};\n\n//Add comment\neditor.getEditorState = function () {\n  var hidden = model.getEditorSettings();\n\n  if (false === hidden) {\n    editor.toggle();\n  }\n};\n\n/**\n * Controls the toggle for the editor\n * @method toggle\n */\neditor.toggle = function () {\n  var editorEl = helpers.getEditorEl(),\n      editorToggle = helpers.getEditorToggle(),\n      links = helpers.getLinks();\n\n  editor.currentContent = model.getCurrentContent();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n    model.updateEditorSettings(false);\n  } else {\n    model.updateEditorSettings(true);\n\n    links.forEach(function (link) {\n      link.removeEventListener('click', editor.protectUnsavedContent, false);\n    });\n  }\n};\n\"use strict\";\n\n/**\n * The primary VanillaPress application object\n * @type {Object}\n */\nvar vanillaPress = {};\n\n/**\n * Initialize the app\n * @method init\n */\nvanillaPress.init = function () {\n  model.init();\n  router.init();\n  view.init();\n  editor.init();\n};\n\nvanillaPress.init();","/**\n * Array of post objects for use\n * @type {Array}\n */\nconst posts = [\n  {\n    \"id\": 1,\n    \"date\": \"2016-01-09T22:05:09\",\n    \"modified\": \"2016-01-09T22:05:09\",\n    \"slug\": \"hello-world\",\n    \"type\": \"posts\",\n    \"title\": \"Hello world!\",\n    \"content\": \"Welcome to WordPress. This is your first post. Edit or delete it, then start writing!\"\n  },\n  {\n    \"id\": 2,\n    \"date\": \"2016-01-10T22:05:09\",\n    \"modified\": \"2016-01-10T22:05:09\",\n    \"slug\": \"learning-javascript\",\n    \"type\": \"posts\",\n    \"title\": \"Learning JavaScript!\",\n    \"content\": \"I'm learning JavaScript and super excited!!!\"\n  },\n  {\n    \"id\": 3,\n    \"date\": \"2016-01-11T22:05:09\",\n    \"modified\": \"2016-01-11T22:05:09\",\n    \"slug\": \"rest-api\",\n    \"type\": \"posts\",\n    \"title\": \"The REST API!\",\n    \"content\": \"I've started working with the REST API in WordPress, what fun!\"\n  },\n  {\n    \"id\": 4,\n    \"date\": \"2016-01-12T22:05:09\",\n    \"modified\": \"2016-01-12T22:05:09\",\n    \"slug\": \"json-data\",\n    \"type\": \"posts\",\n    \"title\": \"JSON Data!\",\n    \"content\": \"So, with the REST API it is posible to pull in WordPress data as pure JSON.  Now I'm figuring out what to do with the data\"\n  },\n  {\n    \"id\": 5,\n    \"date\": \"2016-01-13T22:05:09\",\n    \"modified\": \"2016-01-13T22:05:09\",\n    \"slug\": \"javascript-project\",\n    \"type\": \"posts\",\n    \"title\": \"JavaScript Project\",\n    \"content\": \"Some more sample content to work with\"\n  }\n];\n\n/**\n * Array of page objects for use\n * @type {Array}\n */\nconst pages = [\n  {\n    \"id\": 6,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"home\",\n    \"type\": \"page\",\n    \"title\": \"Home\",\n    \"content\": \"Welcome to VanillaPress, my JavaScript site!\"\n  },\n  {\n    \"id\": 7,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"about\",\n    \"type\": \"page\",\n    \"title\": \"About\",\n    \"content\": \"A little about me!\"\n  },\n  {\n    \"id\": 8,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"blog\",\n    \"type\": \"page\",\n    \"title\": \"Blog\",\n    \"content\": \"Please enjoy my posts\"\n  },\n  {\n    \"id\": 9,\n    \"date\": \"2016-01-18T22:05:09\",\n    \"modified\": \"2016-01-18T22:05:09\",\n    \"slug\": \"contact\",\n    \"type\": \"page\",\n    \"title\": \"Contact\",\n    \"content\": \"Drop me a line with any questions :)\"\n  }\n];\n\n/**\n * Settings for the editor\n * @type {String}\n */\nconst settings = {\n  \"openEditor\": \"true\"\n};\n\n/**\n * Turn the posts/pages array into a usable JSON format\n * @type {String}\n */\nconst data = {\n  posts: posts,\n  pages: pages,\n  settings: settings\n};\n","/**\n * Helpers object\n * @type {Object}\n */\nconst helpers = {};\n\n/**\n * Create a new list item for the main menu\n * @method createMenuItem\n * @param  {Object} data The current post or page of the page\n * @return {Node} A new list item of the main menu\n */\nhelpers.createMenuItem = (data) => {\n  let listItemEl = document.createElement('li');\n\n  listItemEl.appendChild(helpers.createLink(data));\n\n  return listItemEl;\n};\n\n/**\n * Create a new anchor\n * @method createLink\n * @param  {Object} data The current post or page of the page\n * @return {Node} The complete anchor for the current post or page\n */\nhelpers.createLink = (data) => {\n  let pageAnchor = document.createElement('a'),\n    pageAnchorContent = document.createTextNode(data.title);\n\n  if ('home' === data.slug) {\n    pageAnchor.href = '#';\n  } else {\n    pageAnchor.href = '#' + data.slug;\n  }\n\n  pageAnchor.appendChild(pageAnchorContent);\n\n  return pageAnchor;\n};\n\n/**\n * Get the main menu element\n * @method getMenu\n * @return {Node} The main menu for the site\n */\nhelpers.getMenu = () => {\n  return document.querySelector('#mainNav ul');\n};\n\n/**\n * Get the title of the current page\n * @method getPageTitle\n * @return {Node} The title of the current page\n */\nhelpers.getPageTitle = () => {\n  return document.getElementById('pageTitle');\n};\n\n/**\n * Grab all the anchors on the page\n * @method getLinks\n * @return {NodeList} All the anchor elements on the page\n */\nhelpers.getLinks = () => {\n  return document.querySelectorAll('a');\n};\n\n/**\n * Get the content container of the current page\n * @method getContentContainer\n * @return {Node} The content container for the current page\n */\nhelpers.getContentContainer = () => {\n  return document.getElementById('pageContent');\n};\n\n/**\n * Gets the Editor element in the DOM\n * @method getEditorEl\n * @return {Object} Main editor DOM object\n */\nhelpers.getEditorEl = () => {\n  return document.getElementById('editor');\n};\n\n/**\n * Gets Editor toggle element in the DOM\n * @method getEditorToggle\n * @return {Object} Main toggle element\n */\nhelpers.getEditorToggle = () => {\n  return document.getElementById('editorToggle');\n};\n\n/**\n * Gets editor toggle link Element in the DOM\n * @method getEditorToggleLink\n * @return {Object} Main toggle link\n */\nhelpers.getEditorToggleLink = () => {\n  return document.querySelector('#editorToggle a');\n};\n\n/**\n * Get the title input element from the editor\n * @method getEditorTitleEl\n * @return {Object} Editor title input\n */\nhelpers.getEditorTitleEl = () => {\n  return document.getElementById('editTitle');\n};\n\n/**\n * Get the content textarea from the editor\n * @method getEditorContentEl\n * @return {Object} Editor textarea\n */\nhelpers.getEditorContentEl = () => {\n  return document.getElementById('editContent');\n};\n\n/**\n * Get the editor button\n * @method getEditorUpdate\n * @return {Object} Editor button\n */\nhelpers.getEditorUpdate = () => {\n  return document.getElementById('editUpdateBtn');\n};\n","/**\n * Model object\n * @type {Object}\n */\nconst model = {};\n\n/**\n * Initialize the Model\n * @method init\n */\nmodel.init = () => {\n  if (!model.checkLocalStorage()) {\n    model.setLocalStorage(data);\n  }\n};\n\n/**\n * Get the content that is currently on the page or generate 404 text\n * @method getContent\n * @return {Object} Object containing the content for the current page\n */\nmodel.getContent = (slug) => {\n  let content = model.getPost(slug);\n\n  if (null === content) {\n    content = model.getPage(slug);\n  }\n\n  if (null === content) {\n    content = {\n      title: '404 Error',\n      content: 'Content not found'\n    }\n  }\n\n  return content;\n};\n\n/**\n * Determine what post or page is currently being viewed, and get the content for that page\n * @method getCurrentContent\n * @return {Object} The content of the current post or page\n */\nmodel.getCurrentContent = () => {\n  let slug = router.getSlug(),\n    content = model.getContent(slug);\n\n  return content;\n};\n\n/**\n * Get posts data from the browsers local storage, and sets to a variable for use\n * @method getPosts\n * @return {Array} An array of post objects\n */\nmodel.getPosts = () => {\n  return model.getLocalStorage().posts;\n};\n\n/**\n * Get a single post based upon the current URL slug\n * @method getPost\n * @param  {String} slug The current URL slug\n * @return {Object}      The post object with a matching slug, or null if there is no match\n */\nmodel.getPost = (slug) => {\n  let posts = model.getLocalStorage().posts;\n\n  for (let i = 0; i < posts.length; i++) {\n    if (slug === posts[i].slug) {\n      return posts[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get pages data from the browsers local storage, and sets to a variable for use\n * @method getPages\n * @return {Array} An array of page objects\n */\nmodel.getPages = () => {\n  return model.getLocalStorage().pages;\n};\n\n/**\n * Get a single page based upon the current URL slug\n * @method getPage\n * @param  {String} slug The current URL slug\n * @return {Object}      The page object with a matching slug, or null if there is no match\n */\nmodel.getPage = (slug) => {\n  let pages = model.getLocalStorage().pages;\n\n  if ( null === slug ) slug = 'home';\n\n  for (let i = 0; i < pages.length; i++) {\n    if (slug === pages[i].slug) {\n      return pages[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Update the content in the page with the content from the editor\n * @method updateContent\n * @param  {Object}      content The content from the editor\n */\nmodel.updateContent = (content) => {\n  let storage = model.getLocalStorage(),\n    date = new Date();\n\n  if ('post' === content.type) {\n    storage.posts.forEach((post) => {\n      if (content.id === post.id) {\n        post.title = content.title;\n        post.content = content.content;\n        post.modified = date.toISOString();\n      }\n    });\n  }\n\n  if ('page' === content.type) {\n    storage.pages.forEach((page) => {\n      if (content.id === page.id) {\n        page.title = content.title;\n        page.content = content.content;\n        page.modified = date.toISOString();\n      }\n    });\n  }\n\n  model.setLocalStorage(storage);\n};\n\n/**\n * Update the editor settings in local storage\n * @method updateEditorSettings\n * @param  {Boolean} editorState\n */\nmodel.updateEditorSettings = (editorState) => {\n  const storage = model.getLocalStorage();\n\n  storage.settings.openEditor = editorState;\n  model.setLocalStorage(storage);\n};\n\n/**\n * Get the editor settings from local storage\n * @method getEditorSettings\n * @return {String}\n */\nmodel.getEditorSettings = () => {\n  const storage = model.getLocalStorage();\n\n  return storage.settings.openEditor;\n};\n\n/**\n * Check if there is data in the browsers local storage\n * @method checkLocalStorage\n * @return {Boolean}        True or false\n */\nmodel.checkLocalStorage = () => {\n  let storage = model.getLocalStorage();\n\n  if (null === storage) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n/**\n * Get content from the browsers local storage\n * @method getLocalStorage\n * @return {Object} JavaScript object or array containing the stored site data\n */\nmodel.getLocalStorage = () => {\n  return JSON.parse(localStorage.getItem('vanillaPress'));\n};\n\n/**\n * Save the temporary data to the browsers local storage\n * @method setLocalStorage\n * @param  {Object} data JSON string of the data to be stored\n */\nmodel.setLocalStorage = (data) => {\n  localStorage.setItem('vanillaPress', JSON.stringify(data));\n};\n\n/**\n * Deletes data from the browsers local storage\n * @method deleteLocalStorage\n */\nmodel.deleteLocalStorage = () => {\n  localStorage.removeItem('vanillaPress');\n};\n","/**\n * Router object\n * @type {Object}\n */\nconst router = {};\n\n/**\n * Initialize the Router\n * @method init\n */\nrouter.init = () => {\n  router.loadContent();\n  router.listenForChanges();\n};\n\n/**\n * Get the slug from the URL\n * @method getSlug\n * @return {String} The slug for the current post or page\n */\nrouter.getSlug = () => {\n  const slug = window.location.hash;\n\n  if ('' === slug) {\n    return null;\n  } else {\n    return slug.substr(1);\n  }\n};\n\n/**\n * Listen for changes to the URL hash\n * @method listenForChanges\n */\nrouter.listenForChanges = () => {\n  window.addEventListener('hashchange', router.loadContent, false);\n};\n\n/**\n * Load content based upon the current slug\n * @method loadContent\n */\nrouter.loadContent = () => {\n  const slug = router.getSlug(),\n    content = model.getContent(slug),\n    editorEl = helpers.getEditorEl();\n\n  view.clearContent();\n\n  if (null === slug) {\n    view.loadSingle('home');\n  } else if ('blog' === slug) {\n    view.loadBlogPosts();\n  } else {\n    view.loadSingle(slug);\n  }\n\n  editor.currentContent = content;\n\n  if (false === editorEl.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n  }\n};\n","/**\n * View object\n * @type {Object}\n */\nconst view = {};\n\n/**\n * Initialize the View\n * @method init\n */\nview.init = () => {\n  view.createMenu();\n};\n\n/**\n * Get the post data from local storage, create markup for each one, and append them to the page\n * @method loadBlogPosts\n */\nview.loadBlogPosts = () => {\n  let posts = model.getPosts(),\n    postsMarkup = document.createDocumentFragment(),\n    titleEl = helpers.getPageTitle(),\n    contentContainer = helpers.getContentContainer();\n\n  for (let i = 0; i < posts.length; i++) {\n    postsMarkup.appendChild(view.createPostMarkup(posts[i]));\n  }\n\n  contentContainer.appendChild(postsMarkup);\n  titleEl.innerHTML = 'Blog Posts';\n};\n\n/**\n * Load a single blog post\n * @method loadSingle\n * @param  {String} slug The current URL slug\n */\nview.loadSingle = (slug) => {\n  let content = model.getContent(slug),\n    titleEl = helpers.getPageTitle(),\n    postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = content.title;\n  postContent.innerHTML = content.content;\n};\n\n//Updates the main title and content for a page or post\nview.updateTitleAndContent = (content) => {\n  view.updateTitle(content.title);\n  view.updateContent(content.content);\n};\n\n/**\n * Update the page title with content in the editor\n * @method updateTitleFromForm\n */\nview.updateTitle = (title) => {\n  let titleEl = helpers.getPageTitle();\n\n  titleEl.innerHTML = title;\n};\n\n/**\n * Update the page content with content in the editor\n * @method updateContentFromForm\n */\nview.updateContent = (content) => {\n  let contentEl = helpers.getContentContainer();\n\n  contentEl.innerHTML = content;\n};\n\n/**\n * Clear the content from the page\n * @method clearContent\n */\nview.clearContent = () => {\n  let titleEl = helpers.getPageTitle(),\n    postContent = helpers.getContentContainer();\n\n  titleEl.innerHTML = '';\n  postContent.innerHTML = '';\n};\n\n/**\n * Display the menu of pages\n * @method createMenu\n */\nview.createMenu = () => {\n  let pages = model.getPages(),\n    menuMarkup = document.createDocumentFragment(),\n    menuEl = helpers.getMenu();\n\n  for (let i = 0; i < pages.length; i++) {\n    menuMarkup.appendChild(helpers.createMenuItem(pages[i]));\n  }\n\n  menuEl.appendChild(menuMarkup);\n};\n\n/**\n * Create the markup for the posts\n * @method createPostMarkup\n * @param  {Object} post Post to create markup for\n * @return {Node} Final post markup\n */\nview.createPostMarkup = (post) => {\n  let articleEl = document.createElement('article'),\n    titleEl = document.createElement('h2'),\n    titleLink = helpers.createLink(post),\n    postContent = document.createElement('div');\n\n  titleEl.appendChild(titleLink);\n  postContent.appendChild(document.createTextNode(post.content));\n\n  articleEl.appendChild(titleEl);\n  articleEl.appendChild(postContent);\n\n  return articleEl;\n};\n","/**\n * Editor object\n * @type {Object}\n */\nconst editor = {};\n\n/**\n * The current content inside of the editor\n * @type {String}\n */\neditor.currentContent = '';\n\n/**\n * If there is unsaved content in the editor\n * @type {Boolean}\n */\neditor.unsavedContent = false;\n\n/**\n * Initialize the editor\n * @method init\n */\neditor.init = () => {\n  editor.listener();\n  editor.getEditorState();\n};\n\n/**\n * Save the content in the page with the content from the editor\n * @method updateContent\n */\neditor.saveContent = () => {\n  event.preventDefault();\n  model.updateContent(editor.currentContent);\n  editor.unsavedContent = false;\n  editor.animateSaveButton();\n};\n\n/**\n * Update the content with the title from the editor\n * @method updateTitle\n */\neditor.updateTitle = () => {\n  const title = helpers.getEditorTitleEl().value;\n\n  editor.currentContent.title = title;\n  editor.unsavedContent = true;\n  view.updateTitle(title);\n};\n\n/**\n * Update the content with the content from the editor\n * @method updateContent\n */\neditor.updateContent = () => {\n  const content = helpers.getEditorContentEl().value;\n\n  editor.currentContent.content = content;\n  editor.unsavedContent = true;\n  view.updateContent(content);\n};\n\n/**\n * Fill the editor form with the content of the current post or page\n * @method fillEditorForm\n * @param  {Object} content Content object for the current page or post\n */\neditor.loadEditorForm = (content) => {\n  let formTitle = helpers.getEditorTitleEl(),\n    formContent = helpers.getEditorContentEl();\n\n  formTitle.value = content.title;\n  formContent.value = content.content;\n\n  if ( 'blog' === content.slug ) {\n    formContent.setAttribute( 'readonly', 'readonly' );\n  } else {\n    formContent.removeAttribute( 'readonly' );\n  }\n\n  editor.addFormListeners();\n};\n\n//Add comment\neditor.animateSaveButton = () => {\n  const button = helpers.getEditorUpdate(),\n    saved = () => {\n      setTimeout(() => {\n        button.innerText = 'Update';\n      }, 1000);\n    },\n    saving = () => {\n      setTimeout(() => {\n        button.innerText = 'Saved!';\n        saved();\n      }, 900);\n    };\n\n  button.innerText = 'Saving...';\n  saving();\n};\n\n/**\n * Listen to the form inputs for content changes\n * @method addFormListeners\n */\neditor.addFormListeners = () => {\n  let formTitle = helpers.getEditorTitleEl(),\n    formContent = helpers.getEditorContentEl(),\n    formButton = helpers.getEditorUpdate(),\n    links = helpers.getLinks();\n\n  formTitle.addEventListener('input', editor.updateTitle, false);\n  formContent.addEventListener('input', editor.updateContent, false);\n  formButton.addEventListener('click', editor.saveContent, false);\n\n  links.forEach((link) => {\n    link.addEventListener('click', editor.protectUnsavedContent, false);\n  });\n};\n\n/**\n * Inform the user that the content in the editor is not saved\n * @method protectUnsavedContent\n */\neditor.protectUnsavedContent = () => {\n  if (true === editor.unsavedContent) {\n    const confirmed = window.confirm('You should save your changes first!');\n\n    if (false === confirmed) {\n      event.preventDefault();\n    } else {\n      editor.unsavedContent = false;\n    }\n  }\n};\n\n/**\n * Listens for the editor toggle button\n * @method listener\n */\neditor.listener = () => {\n  let toggle = helpers.getEditorToggle();\n\n  toggle.addEventListener('click', () => {\n    editor.toggle();\n    event.preventDefault();\n  }, false);\n};\n\n//Add comment\neditor.getEditorState = () => {\n  const hidden = model.getEditorSettings();\n\n  if ( false === hidden ) {\n    editor.toggle();\n  }\n};\n\n/**\n * Controls the toggle for the editor\n * @method toggle\n */\neditor.toggle = () => {\n  let editorEl = helpers.getEditorEl(),\n    editorToggle = helpers.getEditorToggle(),\n    links = helpers.getLinks();\n\n  editor.currentContent = model.getCurrentContent();\n\n  editorEl.classList.toggle('hidden');\n  editorToggle.classList.toggle('hidden');\n\n  if (false === editorToggle.classList.contains('hidden')) {\n    editor.loadEditorForm(editor.currentContent);\n    model.updateEditorSettings( false );\n  } else {\n    model.updateEditorSettings( true );\n\n    links.forEach( ( link ) => {\n      link.removeEventListener('click', editor.protectUnsavedContent, false);\n    });\n  }\n};\n","/**\n * The primary VanillaPress application object\n * @type {Object}\n */\nconst vanillaPress = {};\n\n/**\n * Initialize the app\n * @method init\n */\nvanillaPress.init = () => {\n  model.init();\n  router.init();\n  view.init();\n  editor.init();\n};\n\nvanillaPress.init();\n"]}